[
  {
    "path": "posts/2020-12-06-uber-movement-kyiv/",
    "title": "Analysis of Kyiv Road Traffic Using Uber Movement Data",
    "description": "This analysis uses Uber Movement speed data to analyze traffic of Kyiv, Ukraine. By looking at the speed data, we are able to find traffic flow's bottlenecks, as well as see the impact of COVID-19-related measures on the city traffic",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2020-12-06",
    "categories": [],
    "contents": "\nTable of Contents\nIntroduction\nData, Materials, Methods\nResults\nDiscussion\nIntroduction\nThe COVID-19 pandemic has impacted many areas of life far beyond human health. It has already had a major impact of economy, ecology, education, technology, finance etc - all too many to enumerate. It will remain a phenomenon that scientists will study for decades to come.\nAmong some of the impacted domains is the urban life, and in particular - how do the COVID-19-related restrictions alter city traffic and congestion. Plenty of research in this area has already been done (Romei and Burn-Murdoch 2020), (Plumer and Popovich 2020), (Geotab Data & Analytics Team 2020), (Wang et al. 2020), (Abu-Rayash and Dincer 2020). One of the most prominent features of such analyses, however, is that the data used in them is either proprietary, exists behind a paywall or a “freemium”-type arrangement, or is pre-aggregated.\nIn this article, I will attempt to examine the impact of COVID-19-related restrictions of city traffic using the data that is available for free: Uber Movement traffic data\nData, Materials, Methods\nAs mentioned above, for this analysis, I used data provided by Uber Movement (Uber Technologies, Inc 2020). Other data sources, such as TomTom Historical Traffic Stats, on which more elaborate traffic studies are based (TomTom 2020) (Romei and Burn-Murdoch 2020), exists. However, obtaining such data points are often associated with pay walls of “freemium” developer accounts, which is completely understandable, yet which at the same time complicates the progress of citizen data science.\nThe benefit of working with Uber Movement data is its free availability. The downside is in the limits of traffic data’s availability: at the time of this writing in October 2020, some Uber Movement data is available for only 60 cities worldwide and mostly up through 2020-03-31.\nInitial Data\nObtaining the data can be done via NPM Uber Movement Data Toolkit, or directly from https://movement.uber.com/ as .csv files.\nThe streets data contains multiple road segments each several meters long and identified by OSM IDs: way ID, start node ID, end node ID. An additional step was taken to only include road segment within administrative city boundaries.\nAs far as speed data, Uber Movement can provide daily data on an “hour” grain level for the above mentioned road segments. Variables provided are mean speed and speed standard deviation. To summarize, each observation includes mean speed and standard deviation for a particular short road segment on a specific hour of a specific day.\nData Transformation\nTo get the final metric of traffic delay (expressed as a %), a series of data transformation steps was taken:\neach segment’s length was obtained from the geometry data;\ngiven each segment’s length and mean speed, average travel was obtained;\nfor every segment, using daytime weekend data1, maximum speed was obtained for every Saturday and Sunday, and the mean of these maximum weekend daytime speeds was established as segment’s benchmark speed.\nwith maximum speeds available, “best time” was calculated for every observation, and the difference between actual travel time and “best time” constituted a time delay.\nin every subsequent grouping and aggregation, delays and “best” times would be summed up, and diving total delay time by total “best time” produced the final metric.\nCode\nDue to a large size of data necessary to work on this project, the analysis has been broken down into several parts:\nThe geospatial data about Kyiv city is pulled from OSM using osmdata package (Padgham et al. 2017). The code and the output are stored in taraskaduk/kyiv_osm repo on GitHub\nThe raw data from Uber Movement was transformed and both the code and the output are stored in taraskaduk/uber-movement repo on GitHUb\nThe final aggregations and visualizations are saved in the RMarkdown document that generates this web page. It should be located within the taraskaduk/taraskaduk-distill repository responsible for publishing the entire site\nResults\nTypical traffic patters\nFrom the most recent available data set from January 1, 2020 to March 31, 2020, 2 months between January 12 and March 12 can be used to display the recent typical traffic: January 1-14 are considered holidays and March 12 through the end of the data set were the dates under COVID-19 quarantine.\nThe typical traffic in Kyiv has all expected attributes of any large city: increased congestion during week days, especially during rush hours.\n\n\n\nSpatially, a typical weekday traffic flow can be visualized in the following manner:\n\n\n\nThe most problematic segments during rush hour can be visualized as follows:\n\n\n\n\n\n\nThe pattern here is clear: the heaviest morning traffic at 8:00 is experienced at bridges and main highways moving people from the edges of the city into CBD, while the heaviest evening traffic at 18:00 is concentrated in the city center’s, with a literal gridlock of cars trying to get out.\nAggregating the data from small segments to full streets, we can identify the streets that are backed up the most overall, at the 8:00 peak and at the 18:00 peak.\n\n\n\n\n\n\n\n\n\nCOVID-19 Quarantine Impact\nWhat we can also imply from these Uber Movement data sets is how the traffic was affected following the initial lockdown measures put in place to prevent the spread of COVID-19, with most countries reacting around February-March 2020.\nThe initial lockdown in Kyiv was initiated on March 12, 2020, which is very clear from the average delays on the roads of the city.\nDaily traffic delays decreased immediately after the imposed lockdown:\n\n\n\nThe effect is also visible on the hourly level, and for every day of the week, including weekends:\n\n\n\n\n\n\nDiscussion\nUnfortunately, the data provided by Uber Movement only goes up to March 31, 2020. Therefore, at this moment in time, it becomes impossible to evaluate the long-term effect of the lockdown, the easing of the restrictions, or the public fatigue on the traffic delays.\nNevertheless, this analysis provides a basis for such future examination, whenever more recent data becomes available. The analysis also allows to perform a similar analysis for any of the 60 cities for which the data is available. The R code used to create this analysis can be repurposed for other cities with minimal changes (see “Code” section for links to the R code behind this analysis).\n\n\nAbu-Rayash, Azzam, and Ibrahim Dincer. 2020. “Analysis of Mobility Trends During the COVID-19 Coronavirus Pandemic: Exploring the Impacts on Global Aviation and Travel in Selected Cities.” Energy Research & Social Science 68 (October): 101693. https://doi.org/10.1016/j.erss.2020.101693.\n\n\nGeotab Data & Analytics Team. 2020. “The Impact of COVID-19 on Congestion and Commercial Traffic in Cities.” Geotab. https://www.geotab.com/blog/congestion-and-commercial-traffic/.\n\n\nPadgham, Mark, Bob Rudis, Robin Lovelace, and Maëlle Salmon. 2017. “Osmdata.” The Journal of Open Source Software 2 (14). https://doi.org/10.21105/joss.00305.\n\n\nPlumer, Brad, and Nadja Popovich. 2020. “Traffic and Pollution Plummet as U.S. Cities Shut down for Coronavirus.” The New York Times, March. https://www.nytimes.com/interactive/2020/03/22/climate/coronavirus-usa-traffic.html.\n\n\nRomei, V, and J Burn-Murdoch. 2020. “Real-Time Data Show Virus Hit to Global Economic Activity.” Financial Times, Available at: Https://Www.ft.com/Content/D184fa0a-6904-11ea-800d-Da70cff6e4d3 (Accessed 30 April 2020).\n\n\nTomTom. 2020. “Helsinki Study on Traffic Flow Relies on TomTom Historical Traffic Data.” https://download.tomtom.com/open/banners/Helsinki-Case-Study-Traffic-Stats.pdf.\n\n\nUber Technologies, Inc. 2020. “Uber Movement.” https://movement.uber.com/.\n\n\nWang, Ding, Brian Yueshuai He, Jingqin Gao, Joseph Y. J. Chow, Kaan Ozbay, and Shri Iyer. 2020. “Impact of COVID-19 Behavioral Inertia on Reopening Strategies for New York City Transit.” arXiv:2006.13368 [Physics, Q-Fin], June. http://arxiv.org/abs/2006.13368.\n\n\nNighttime data was avoided due to an increased probability of excessive speeding, which would skew the data. Instead, weekend daytime speeds were analyzed to establish the benchmark↩︎\n",
    "preview": "posts/2020-12-06-uber-movement-kyiv/temp/preview.jpg",
    "last_modified": "2021-01-09T21:05:43-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2019-11-11-excess-degree-days/",
    "title": "Measuring Excess Degree-Days in the Context of Location Comfort and Liveability",
    "description": "Calcualting deviations (excess heat and  excess cold) from an established temperature baseline as area under the temperature curve via integral calculus and expressing such measure as Excess Degree-Days, or EDD.",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2019-11-11",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nMethodology\nResults\nNotes\nR code for EDD\n\nIntroduction\nCharacterization of daily air temperature as it relates to human comfort and conditions optimal for survival has many solutions. On the one hand, the mean daily, monthly, and annual air temperatures convey the necessary information with one number. However, as it is the case with many measures of central tendency, mean temperature loses a lot of important information, such as minimum and maximum values, and the range. On the other hand, minimum and maximum values inform the public of the temperature on a given day, but don’t communicate the extremity of said temperature readings well enough. Additionally, both daily min and max values, when aggregated to average minimums and average maximums, become more abstract.\nFinally, a measure that is being used more frequently in recent years and is designed to communicate the dangers of climate change is the amount of days with temperature above a certain threshold. For instance, in the articles published in the United States, “days with temperature above 90°F/95°F” is frequently used (Plumer and Popovich 2017) (Climate Impact Lab 2018) (Livingston 2020). Such indicator serves its purpose relatively well, but it loses the complexity of temperature variation and extremes and potentially evens out places with different weather and temperature readings.\nOn the other hand, there exist indexes and calculations that reflect the weather (and temperature in particular) not in degrees or in days when a certain condition is met, but in degree-hours or degree-days, quantifying the exposure to heat energy over time. While methodologies vary based on the domain and task at hand, the key idea is to present the difference between an established baseline and actual temperature readings as area, and then to quantify that area (Thom 1952).1\nWhile a lot of applications of degree-hours and degree-days seem to be focused in pest control (Zalom et al. 1983), forensics (Megyesi, Nawrocki, and Haskell 2005), and vegetation research, some use of such calculations has been applied to humans (Lin et al. 2019). I propose to use this approach as an alternative approach in evaluating the exposure to excess heat and excess cold in excess heat degree-days, excess cold degree days, and total excess degree-days, where the baseline can be set as temperature optimal for human habitation, and the actual temperature curve is presented as a sine and is calculated from minimum and maximum readings for a given day. Then, quantifying excess heat, cold, and total degree-days can be accomplished with integral calculus as finding the area under the curve.\nMethodology\nFor the purposes of this analysis, several assumptions and simplifications must be made. The daily temperature is assumed to follow a sinusoidal curve from its minimum value to its maximum value and back.2 More specifically, the daily temperature curve is modeled as a cosine function, with the minimum temperature assumed at midnight and maximum temperature at noon:3\n\\[f(\\theta) = -a \\cdot cos(b\\theta) + d = -\\frac{({t_{max}} - {t_{min}})}{2}\\cdot cos(\\frac{\\pi}{12}\\theta) + t_{min} + \\frac{(t_{max}-t_{min})}{2}\\]\nThe baseline temperature from which the excess degree-days is calculated is assumed at 18°C, which is a mid-point between a slightly colder temperature optimal for sleep, and a slightly warmer temperature optimal for daytime activity. It needs to be pointed out that such baseline is not entirely objective, as there is no agreement on what the optimal temperature for humans is, as well as there is no consideration given to most other parameters that impact the perception of outdoor air temperature: sunlight exposure, wind, precipitation etc.\nTo sum up, 18°C is the baseline, and any deviation up or down from which will make a human experience of outside temperature less favorable. Along the same lines, any deviation from 18°C up or down will also make humans rely on other advances of civilization: clothing, indoor insulation, heating, air conditioning, more clothing layers, more heating etc. Thus, the higher the excess degree-days reading, the less livable the place is, or the more reliant the place is on things like air conditioning or central heating.\nExcess Degree-Hours and Excess Degree-Days Calculation\nThe calculation of Excess Degree-Hours (or \\(EDH\\) for short) for the general case where the temperature curve crosses the baseline two times on a given day can be notated as:\n\\[EDH = \\int_{0}^{\\theta_1} (g(\\theta) - f(\\theta)) d\\theta + \\int_{\\theta_1}^{\\theta_2} (f(\\theta) - g(\\theta)) d\\theta + \\int_{\\theta_2}^{24} (g(\\theta) - f(\\theta)) d\\theta\\]\nwhere \\(\\theta\\) is time, \\(f(\\theta)\\) is our cosine function, \\(g(\\theta) = 18°C\\) (the baseline), and \\(\\theta_1\\) and \\(\\theta_2\\) are the times at which the temperature curve crosses the baseline.\n\n\n\nThe area above the baseline stands for excess heat degree-days, and the area below the baseline - for excess cold degree-days. The sum of absolute values of both hot and cold areas will represent the total excess degree-days.\nThe cases when the curve stays completely above or below the baseline are special cases that require only one of the three integrals.\nTo get Excess Degree-Days (\\(EDD\\)), the \\(EDH\\) needs to be divided by 24: \\[ EDD = \\frac{EDH}{24}\\]\nCalculation examples\nTo demonstrate the way this measure works, I will use 3 cities - Los Angeles, Miami, Minneapolis - at 2 specific dates: Feb 1 and Jul 1 of 2018.\nGiven the min and max temperature values for each city for both days, we can model the temperature curves:\n\nWe can then proceed with calculating the area under each curve:\n\nLooking more broadly at full year 2018, we can visualize the cumulative excess degree-hours:\n\nResults\nThis article sets a theoretical basis for further practical applications. It provides another tool in the toolbox of data analysis as it relates to climate change, weather, urban comfort and livability.\nMy plan is to build on this work in the future, but given the time constraints, this may happen at some time in the future. Until then, I am hoping this approach will be useful to other researchers.\nU.S. CBSAs ranked by excess degree-days\nOne quick demonstration of the EDD calculation can be done with displaying the EDD for the United States CBSAs. I will use the data from another project I’ve been working on:4\n\n\n\n{\"columns\":[{\"label\":[\"cbsafp\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"city\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"edd_total\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"edd_cold\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"edd_hot\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"25900\",\"2\":\"Hilo\",\"3\":\"1189.77\",\"4\":\"351.17\",\"5\":\"838.60\"},{\"1\":\"37100\",\"2\":\"Oxnard\",\"3\":\"1610.07\",\"4\":\"1041.17\",\"5\":\"568.84\"},{\"1\":\"41740\",\"2\":\"San Diego\",\"3\":\"1797.78\",\"4\":\"882.43\",\"5\":\"915.40\"},{\"1\":\"41500\",\"2\":\"Salinas\",\"3\":\"1821.09\",\"4\":\"1559.02\",\"5\":\"262.10\"},{\"1\":\"42200\",\"2\":\"Santa Maria\",\"3\":\"1903.34\",\"4\":\"1495.19\",\"5\":\"408.20\"},{\"1\":\"41860\",\"2\":\"San Francisco\",\"3\":\"1908.79\",\"4\":\"1413.33\",\"5\":\"495.45\"},{\"1\":\"31080\",\"2\":\"Los Angeles\",\"3\":\"1952.35\",\"4\":\"914.48\",\"5\":\"1037.89\"},{\"1\":\"41940\",\"2\":\"San Jose\",\"3\":\"2042.05\",\"4\":\"1239.95\",\"5\":\"802.07\"},{\"1\":\"42100\",\"2\":\"Santa Cruz\",\"3\":\"2069.51\",\"4\":\"1604.58\",\"5\":\"465.01\"},{\"1\":\"42220\",\"2\":\"Santa Rosa\",\"3\":\"2142.27\",\"4\":\"1880.60\",\"5\":\"261.64\"},{\"1\":\"42020\",\"2\":\"San Luis Obispo\",\"3\":\"2422.38\",\"4\":\"1479.29\",\"5\":\"943.08\"},{\"1\":\"15060\",\"2\":\"Brookings\",\"3\":\"2433.67\",\"4\":\"2270.65\",\"5\":\"163.01\"},{\"1\":\"41220\",\"2\":\"St. Marys\",\"3\":\"2433.92\",\"4\":\"763.89\",\"5\":\"1670.04\"},{\"1\":\"18300\",\"2\":\"Coos Bay\",\"3\":\"2485.55\",\"4\":\"2426.90\",\"5\":\"58.63\"},{\"1\":\"18860\",\"2\":\"Crescent City\",\"3\":\"2533.89\",\"4\":\"2510.99\",\"5\":\"22.89\"},{\"1\":\"12120\",\"2\":\"Atmore\",\"3\":\"2595.85\",\"4\":\"1076.66\",\"5\":\"1519.15\"},{\"1\":\"21700\",\"2\":\"Eureka\",\"3\":\"2598.31\",\"4\":\"2559.11\",\"5\":\"39.21\"},{\"1\":\"45980\",\"2\":\"Troy\",\"3\":\"2606.08\",\"4\":\"1179.16\",\"5\":\"1426.91\"},{\"1\":\"34900\",\"2\":\"Napa\",\"3\":\"2625.24\",\"4\":\"1923.26\",\"5\":\"702.00\"},{\"1\":\"46380\",\"2\":\"Ukiah\",\"3\":\"2754.17\",\"4\":\"1833.79\",\"5\":\"920.39\"},{\"1\":\"27980\",\"2\":\"Kahului\",\"3\":\"2765.44\",\"4\":\"15.97\",\"5\":\"2749.44\"},{\"1\":\"11820\",\"2\":\"Astoria\",\"3\":\"2804.08\",\"4\":\"2671.76\",\"5\":\"132.34\"},{\"1\":\"46700\",\"2\":\"Vallejo\",\"3\":\"2806.40\",\"4\":\"1545.02\",\"5\":\"1261.40\"},{\"1\":\"17020\",\"2\":\"Chico\",\"3\":\"2816.56\",\"4\":\"1476.01\",\"5\":\"1340.54\"},{\"1\":\"42820\",\"2\":\"Selma\",\"3\":\"2824.69\",\"4\":\"1351.24\",\"5\":\"1473.46\"},{\"1\":\"33700\",\"2\":\"Modesto\",\"3\":\"2830.94\",\"4\":\"1357.38\",\"5\":\"1473.55\"},{\"1\":\"43420\",\"2\":\"Sierra Vista\",\"3\":\"2835.55\",\"4\":\"1539.36\",\"5\":\"1296.20\"},{\"1\":\"22840\",\"2\":\"Fort Payne\",\"3\":\"2843.38\",\"4\":\"1827.27\",\"5\":\"1016.10\"},{\"1\":\"45180\",\"2\":\"Talladega\",\"3\":\"2853.37\",\"4\":\"1508.36\",\"5\":\"1344.99\"},{\"1\":\"40140\",\"2\":\"Riverside\",\"3\":\"2891.00\",\"4\":\"1034.51\",\"5\":\"1856.52\"},{\"1\":\"35700\",\"2\":\"Nogales\",\"3\":\"2895.99\",\"4\":\"1812.69\",\"5\":\"1083.25\"},{\"1\":\"40900\",\"2\":\"Sacramento\",\"3\":\"2898.75\",\"4\":\"2025.82\",\"5\":\"872.91\"},{\"1\":\"42460\",\"2\":\"Scottsboro\",\"3\":\"2913.17\",\"4\":\"1763.65\",\"5\":\"1149.48\"},{\"1\":\"28180\",\"2\":\"Kapaa\",\"3\":\"2914.96\",\"4\":\"11.64\",\"5\":\"2903.30\"},{\"1\":\"42660\",\"2\":\"Seattle\",\"3\":\"2936.71\",\"4\":\"2606.17\",\"5\":\"330.53\"},{\"1\":\"10140\",\"2\":\"Aberdeen\",\"3\":\"2936.80\",\"4\":\"2826.71\",\"5\":\"110.13\"},{\"1\":\"34580\",\"2\":\"Mount Vernon\",\"3\":\"2950.50\",\"4\":\"2744.34\",\"5\":\"206.12\"},{\"1\":\"19460\",\"2\":\"Decatur\",\"3\":\"2964.59\",\"4\":\"1742.20\",\"5\":\"1222.36\"},{\"1\":\"40700\",\"2\":\"Roseburg\",\"3\":\"2972.36\",\"4\":\"2152.34\",\"5\":\"820.04\"},{\"1\":\"46520\",\"2\":\"Urban Honolulu\",\"3\":\"2977.40\",\"4\":\"6.60\",\"5\":\"2970.80\"},{\"1\":\"11700\",\"2\":\"Asheville\",\"3\":\"2978.07\",\"4\":\"2314.04\",\"5\":\"663.99\"},{\"1\":\"44700\",\"2\":\"Stockton\",\"3\":\"2992.01\",\"4\":\"1554.14\",\"5\":\"1437.93\"},{\"1\":\"42700\",\"2\":\"Sebring\",\"3\":\"2993.60\",\"4\":\"366.85\",\"5\":\"2626.70\"},{\"1\":\"49700\",\"2\":\"Yuba City\",\"3\":\"2995.73\",\"4\":\"1567.61\",\"5\":\"1428.12\"},{\"1\":\"23420\",\"2\":\"Fresno\",\"3\":\"3000.04\",\"4\":\"1211.64\",\"5\":\"1788.42\"},{\"1\":\"36020\",\"2\":\"Oak Harbor\",\"3\":\"3010.53\",\"4\":\"2945.95\",\"5\":\"64.64\"},{\"1\":\"31020\",\"2\":\"Longview\",\"3\":\"3026.45\",\"4\":\"2569.01\",\"5\":\"457.41\"},{\"1\":\"18900\",\"2\":\"Crossville\",\"3\":\"3029.47\",\"4\":\"2373.87\",\"5\":\"655.56\"},{\"1\":\"32900\",\"2\":\"Merced\",\"3\":\"3035.62\",\"4\":\"1577.40\",\"5\":\"1458.25\"},{\"1\":\"28620\",\"2\":\"Kill Devil Hills\",\"3\":\"3066.78\",\"4\":\"1479.82\",\"5\":\"1586.93\"},{\"1\":\"47300\",\"2\":\"Visalia\",\"3\":\"3076.00\",\"4\":\"1398.04\",\"5\":\"1677.96\"},{\"1\":\"39780\",\"2\":\"Red Bluff\",\"3\":\"3086.61\",\"4\":\"1485.68\",\"5\":\"1600.88\"},{\"1\":\"31460\",\"2\":\"Madera\",\"3\":\"3086.79\",\"4\":\"1466.67\",\"5\":\"1620.18\"},{\"1\":\"13380\",\"2\":\"Bellingham\",\"3\":\"3107.09\",\"4\":\"2907.28\",\"5\":\"199.88\"},{\"1\":\"18700\",\"2\":\"Corvallis\",\"3\":\"3109.04\",\"4\":\"2435.80\",\"5\":\"673.29\"},{\"1\":\"29740\",\"2\":\"Las Cruces\",\"3\":\"3119.10\",\"4\":\"1682.83\",\"5\":\"1436.29\"},{\"1\":\"39820\",\"2\":\"Redding\",\"3\":\"3122.68\",\"4\":\"1549.92\",\"5\":\"1572.75\"},{\"1\":\"33980\",\"2\":\"Morehead City\",\"3\":\"3122.71\",\"4\":\"1357.26\",\"5\":\"1765.44\"},{\"1\":\"38820\",\"2\":\"Port Angeles\",\"3\":\"3152.32\",\"4\":\"3067.80\",\"5\":\"84.52\"},{\"1\":\"41420\",\"2\":\"Salem\",\"3\":\"3155.75\",\"4\":\"2522.68\",\"5\":\"633.07\"},{\"1\":\"38900\",\"2\":\"Portland\",\"3\":\"3157.64\",\"4\":\"2554.51\",\"5\":\"603.15\"},{\"1\":\"25260\",\"2\":\"Hanford\",\"3\":\"3157.93\",\"4\":\"1487.47\",\"5\":\"1670.49\"},{\"1\":\"34820\",\"2\":\"Myrtle Beach\",\"3\":\"3162.16\",\"4\":\"1286.27\",\"5\":\"1875.87\"},{\"1\":\"40760\",\"2\":\"Ruidoso\",\"3\":\"3166.39\",\"4\":\"2708.51\",\"5\":\"457.85\"},{\"1\":\"12540\",\"2\":\"Bakersfield\",\"3\":\"3168.27\",\"4\":\"1577.61\",\"5\":\"1590.66\"},{\"1\":\"37460\",\"2\":\"Panama City\",\"3\":\"3187.19\",\"4\":\"737.44\",\"5\":\"2449.73\"},{\"1\":\"29820\",\"2\":\"Las Vegas\",\"3\":\"3239.58\",\"4\":\"1293.85\",\"5\":\"1945.70\"},{\"1\":\"13720\",\"2\":\"Big Stone Gap\",\"3\":\"3239.86\",\"4\":\"2509.29\",\"5\":\"730.54\"},{\"1\":\"19660\",\"2\":\"Deltona\",\"3\":\"3240.27\",\"4\":\"463.56\",\"5\":\"2776.68\"},{\"1\":\"21340\",\"2\":\"El Paso\",\"3\":\"3241.46\",\"4\":\"1348.50\",\"5\":\"1892.98\"},{\"1\":\"19300\",\"2\":\"Daphne\",\"3\":\"3249.61\",\"4\":\"922.63\",\"5\":\"2326.96\"},{\"1\":\"34340\",\"2\":\"Mount Airy\",\"3\":\"3250.40\",\"4\":\"1960.41\",\"5\":\"1289.98\"},{\"1\":\"46060\",\"2\":\"Tucson\",\"3\":\"3252.18\",\"4\":\"908.96\",\"5\":\"2343.22\"},{\"1\":\"10460\",\"2\":\"Alamogordo\",\"3\":\"3257.08\",\"4\":\"1821.14\",\"5\":\"1435.97\"},{\"1\":\"22580\",\"2\":\"Forest City\",\"3\":\"3259.12\",\"4\":\"1818.32\",\"5\":\"1440.71\"},{\"1\":\"23240\",\"2\":\"Fredericksburg\",\"3\":\"3270.31\",\"4\":\"1229.22\",\"5\":\"2041.02\"},{\"1\":\"29420\",\"2\":\"Lake Havasu City\",\"3\":\"3282.12\",\"4\":\"1218.50\",\"5\":\"2063.62\"},{\"1\":\"43140\",\"2\":\"Shelby\",\"3\":\"3291.73\",\"4\":\"1851.16\",\"5\":\"1440.52\"},{\"1\":\"39150\",\"2\":\"Prescott Valley\",\"3\":\"3304.23\",\"4\":\"2376.97\",\"5\":\"927.24\"},{\"1\":\"19140\",\"2\":\"Dalton\",\"3\":\"3307.09\",\"4\":\"1824.11\",\"5\":\"1482.94\"},{\"1\":\"45580\",\"2\":\"Thomaston\",\"3\":\"3328.70\",\"4\":\"1266.48\",\"5\":\"2062.19\"},{\"1\":\"25060\",\"2\":\"Gulfport\",\"3\":\"3334.50\",\"4\":\"846.65\",\"5\":\"2487.86\"},{\"1\":\"43500\",\"2\":\"Silver City\",\"3\":\"3337.57\",\"4\":\"2404.81\",\"5\":\"932.79\"},{\"1\":\"32780\",\"2\":\"Medford\",\"3\":\"3339.93\",\"4\":\"2362.90\",\"5\":\"977.03\"},{\"1\":\"10700\",\"2\":\"Albertville\",\"3\":\"3340.99\",\"4\":\"1648.99\",\"5\":\"1691.97\"},{\"1\":\"43900\",\"2\":\"Spartanburg\",\"3\":\"3353.60\",\"4\":\"1574.52\",\"5\":\"1779.06\"},{\"1\":\"23580\",\"2\":\"Gainesville\",\"3\":\"3362.25\",\"4\":\"1711.07\",\"5\":\"1651.18\"},{\"1\":\"21660\",\"2\":\"Eugene\",\"3\":\"3362.70\",\"4\":\"2727.43\",\"5\":\"635.25\"},{\"1\":\"35900\",\"2\":\"North Wilkesboro\",\"3\":\"3372.03\",\"4\":\"2143.38\",\"5\":\"1228.65\"},{\"1\":\"41100\",\"2\":\"St. George\",\"3\":\"3372.23\",\"4\":\"1698.28\",\"5\":\"1673.91\"},{\"1\":\"34020\",\"2\":\"Morgan City\",\"3\":\"3379.67\",\"4\":\"683.56\",\"5\":\"2696.08\"},{\"1\":\"14740\",\"2\":\"Bremerton\",\"3\":\"3382.02\",\"4\":\"3041.20\",\"5\":\"340.83\"},{\"1\":\"26020\",\"2\":\"Hobbs\",\"3\":\"3384.34\",\"4\":\"1979.61\",\"5\":\"1404.72\"},{\"1\":\"24860\",\"2\":\"Greenville\",\"3\":\"3386.87\",\"4\":\"1589.73\",\"5\":\"1797.15\"},{\"1\":\"37860\",\"2\":\"Pensacola\",\"3\":\"3392.66\",\"4\":\"805.43\",\"5\":\"2587.24\"},{\"1\":\"35380\",\"2\":\"New Orleans\",\"3\":\"3396.16\",\"4\":\"662.68\",\"5\":\"2733.46\"},{\"1\":\"34220\",\"2\":\"Moultrie\",\"3\":\"3396.23\",\"4\":\"866.73\",\"5\":\"2529.48\"},{\"1\":\"13820\",\"2\":\"Birmingham\",\"3\":\"3399.08\",\"4\":\"1373.98\",\"5\":\"2025.10\"},{\"1\":\"31060\",\"2\":\"Los Alamos\",\"3\":\"3406.35\",\"4\":\"2907.95\",\"5\":\"498.37\"},{\"1\":\"49180\",\"2\":\"Winston\",\"3\":\"3406.81\",\"4\":\"1939.31\",\"5\":\"1467.52\"},{\"1\":\"37060\",\"2\":\"Oxford\",\"3\":\"3407.31\",\"4\":\"1741.95\",\"5\":\"1665.31\"},{\"1\":\"25860\",\"2\":\"Hickory\",\"3\":\"3409.65\",\"4\":\"2084.16\",\"5\":\"1325.50\"},{\"1\":\"29340\",\"2\":\"Lake Charles\",\"3\":\"3410.85\",\"4\":\"796.04\",\"5\":\"2614.80\"},{\"1\":\"18980\",\"2\":\"Cullman\",\"3\":\"3418.12\",\"4\":\"1766.42\",\"5\":\"1651.70\"},{\"1\":\"43220\",\"2\":\"Shelton\",\"3\":\"3418.89\",\"4\":\"2994.07\",\"5\":\"424.82\"},{\"1\":\"40940\",\"2\":\"Safford\",\"3\":\"3420.00\",\"4\":\"1423.81\",\"5\":\"1996.27\"},{\"1\":\"12060\",\"2\":\"Atlanta\",\"3\":\"3423.03\",\"4\":\"1597.13\",\"5\":\"1825.92\"},{\"1\":\"13260\",\"2\":\"Bedford\",\"3\":\"3426.82\",\"4\":\"2608.36\",\"5\":\"818.42\"},{\"1\":\"49740\",\"2\":\"Yuma\",\"3\":\"3428.43\",\"4\":\"679.76\",\"5\":\"2748.61\"},{\"1\":\"10740\",\"2\":\"Albuquerque\",\"3\":\"3429.15\",\"4\":\"2339.01\",\"5\":\"1090.14\"},{\"1\":\"27380\",\"2\":\"Jacksonville\",\"3\":\"3430.16\",\"4\":\"1095.65\",\"5\":\"2334.45\"},{\"1\":\"15260\",\"2\":\"Brunswick\",\"3\":\"3430.87\",\"4\":\"799.66\",\"5\":\"2631.25\"},{\"1\":\"37340\",\"2\":\"Palm Bay\",\"3\":\"3430.94\",\"4\":\"316.42\",\"5\":\"3114.50\"},{\"1\":\"18880\",\"2\":\"Crestview\",\"3\":\"3434.79\",\"4\":\"849.02\",\"5\":\"2585.78\"},{\"1\":\"42860\",\"2\":\"Seneca\",\"3\":\"3436.18\",\"4\":\"1457.44\",\"5\":\"1978.78\"},{\"1\":\"19700\",\"2\":\"Deming\",\"3\":\"3446.33\",\"4\":\"1977.05\",\"5\":\"1469.26\"},{\"1\":\"29860\",\"2\":\"Laurel\",\"3\":\"3446.65\",\"4\":\"1150.44\",\"5\":\"2296.23\"},{\"1\":\"38060\",\"2\":\"Phoenix\",\"3\":\"3448.22\",\"4\":\"722.95\",\"5\":\"2725.24\"},{\"1\":\"25940\",\"2\":\"Hilton Head Island\",\"3\":\"3450.16\",\"4\":\"966.51\",\"5\":\"2483.68\"},{\"1\":\"48900\",\"2\":\"Wilmington\",\"3\":\"3452.00\",\"4\":\"1351.91\",\"5\":\"2100.04\"},{\"1\":\"26380\",\"2\":\"Houma\",\"3\":\"3458.51\",\"4\":\"713.40\",\"5\":\"2745.10\"},{\"1\":\"36500\",\"2\":\"Olympia\",\"3\":\"3458.89\",\"4\":\"3045.73\",\"5\":\"413.15\"},{\"1\":\"11500\",\"2\":\"Anniston\",\"3\":\"3459.82\",\"4\":\"1461.66\",\"5\":\"1998.15\"},{\"1\":\"45020\",\"2\":\"Sweetwater\",\"3\":\"3465.46\",\"4\":\"1391.63\",\"5\":\"2073.82\"},{\"1\":\"20060\",\"2\":\"Douglas\",\"3\":\"3472.22\",\"4\":\"864.44\",\"5\":\"2607.78\"},{\"1\":\"43700\",\"2\":\"Somerset\",\"3\":\"3473.26\",\"4\":\"2319.25\",\"5\":\"1153.98\"},{\"1\":\"14380\",\"2\":\"Boone\",\"3\":\"3486.41\",\"4\":\"2954.56\",\"5\":\"531.80\"},{\"1\":\"16740\",\"2\":\"Charlotte\",\"3\":\"3492.03\",\"4\":\"1797.73\",\"5\":\"1694.28\"},{\"1\":\"28700\",\"2\":\"Kingsport\",\"3\":\"3492.66\",\"4\":\"2266.87\",\"5\":\"1225.82\"},{\"1\":\"24780\",\"2\":\"Greenville\",\"3\":\"3493.11\",\"4\":\"1715.73\",\"5\":\"1777.36\"},{\"1\":\"16700\",\"2\":\"Charleston\",\"3\":\"3493.95\",\"4\":\"1072.70\",\"5\":\"2421.24\"},{\"1\":\"33300\",\"2\":\"Milledgeville\",\"3\":\"3506.53\",\"4\":\"1196.66\",\"5\":\"2309.87\"},{\"1\":\"26620\",\"2\":\"Huntsville\",\"3\":\"3514.50\",\"4\":\"1769.06\",\"5\":\"1745.46\"},{\"1\":\"28820\",\"2\":\"Kinston\",\"3\":\"3516.66\",\"4\":\"1624.29\",\"5\":\"1892.33\"},{\"1\":\"27260\",\"2\":\"Jacksonville\",\"3\":\"3517.10\",\"4\":\"666.33\",\"5\":\"2850.79\"},{\"1\":\"12020\",\"2\":\"Athens\",\"3\":\"3517.49\",\"4\":\"1549.23\",\"5\":\"1968.26\"},{\"1\":\"47080\",\"2\":\"Vidalia\",\"3\":\"3518.50\",\"4\":\"965.99\",\"5\":\"2552.47\"},{\"1\":\"33660\",\"2\":\"Mobile\",\"3\":\"3523.76\",\"4\":\"884.73\",\"5\":\"2639.06\"},{\"1\":\"30980\",\"2\":\"Longview\",\"3\":\"3529.30\",\"4\":\"1177.54\",\"5\":\"2351.78\"},{\"1\":\"42340\",\"2\":\"Savannah\",\"3\":\"3529.75\",\"4\":\"950.24\",\"5\":\"2579.49\"},{\"1\":\"36100\",\"2\":\"Ocala\",\"3\":\"3534.92\",\"4\":\"629.51\",\"5\":\"2905.41\"},{\"1\":\"35840\",\"2\":\"North Port\",\"3\":\"3535.30\",\"4\":\"313.33\",\"5\":\"3221.94\"},{\"1\":\"37220\",\"2\":\"Pahrump\",\"3\":\"3535.35\",\"4\":\"2524.42\",\"5\":\"1010.96\"},{\"1\":\"47260\",\"2\":\"Virginia Beach\",\"3\":\"3536.62\",\"4\":\"1819.65\",\"5\":\"1716.97\"},{\"1\":\"47460\",\"2\":\"Walla Walla\",\"3\":\"3548.61\",\"4\":\"2750.85\",\"5\":\"797.77\"},{\"1\":\"32620\",\"2\":\"McComb\",\"3\":\"3556.39\",\"4\":\"1059.47\",\"5\":\"2496.98\"},{\"1\":\"46220\",\"2\":\"Tuscaloosa\",\"3\":\"3570.47\",\"4\":\"1325.46\",\"5\":\"2245.00\"},{\"1\":\"22520\",\"2\":\"Florence\",\"3\":\"3571.91\",\"4\":\"1687.24\",\"5\":\"1884.66\"},{\"1\":\"12260\",\"2\":\"Augusta\",\"3\":\"3584.88\",\"4\":\"1263.54\",\"5\":\"2321.34\"},{\"1\":\"39900\",\"2\":\"Reno\",\"3\":\"3585.55\",\"4\":\"2747.75\",\"5\":\"837.81\"},{\"1\":\"13980\",\"2\":\"Blacksburg\",\"3\":\"3585.59\",\"4\":\"2558.80\",\"5\":\"1026.78\"},{\"1\":\"35100\",\"2\":\"New Bern\",\"3\":\"3589.28\",\"4\":\"1491.31\",\"5\":\"2097.94\"},{\"1\":\"10760\",\"2\":\"Alexander City\",\"3\":\"3598.49\",\"4\":\"1336.10\",\"5\":\"2262.39\"},{\"1\":\"38940\",\"2\":\"Port St. Lucie\",\"3\":\"3598.73\",\"4\":\"244.69\",\"5\":\"3354.04\"},{\"1\":\"20140\",\"2\":\"Dublin\",\"3\":\"3601.27\",\"4\":\"1253.45\",\"5\":\"2347.84\"},{\"1\":\"33180\",\"2\":\"Middlesborough\",\"3\":\"3604.29\",\"4\":\"2091.69\",\"5\":\"1512.61\"},{\"1\":\"13140\",\"2\":\"Beaumont\",\"3\":\"3605.78\",\"4\":\"800.00\",\"5\":\"2805.77\"},{\"1\":\"28500\",\"2\":\"Kerrville\",\"3\":\"3613.17\",\"4\":\"1160.96\",\"5\":\"2452.23\"},{\"1\":\"23540\",\"2\":\"Gainesville\",\"3\":\"3614.18\",\"4\":\"681.80\",\"5\":\"2932.37\"},{\"1\":\"38920\",\"2\":\"Port Lavaca\",\"3\":\"3614.34\",\"4\":\"654.22\",\"5\":\"2960.10\"},{\"1\":\"14540\",\"2\":\"Bowling Green\",\"3\":\"3618.18\",\"4\":\"2152.69\",\"5\":\"1465.50\"},{\"1\":\"36700\",\"2\":\"Orangeburg\",\"3\":\"3623.53\",\"4\":\"1320.94\",\"5\":\"2302.58\"},{\"1\":\"24940\",\"2\":\"Greenwood\",\"3\":\"3625.43\",\"4\":\"1615.89\",\"5\":\"2009.57\"},{\"1\":\"10220\",\"2\":\"Ada\",\"3\":\"3625.62\",\"4\":\"1832.95\",\"5\":\"1792.68\"},{\"1\":\"41540\",\"2\":\"Salisbury, MD\",\"3\":\"3629.50\",\"4\":\"2340.15\",\"5\":\"1289.36\"},{\"1\":\"21020\",\"2\":\"Elizabeth City\",\"3\":\"3631.61\",\"4\":\"1744.13\",\"5\":\"1887.52\"},{\"1\":\"28940\",\"2\":\"Knoxville\",\"3\":\"3639.26\",\"4\":\"1968.75\",\"5\":\"1670.49\"},{\"1\":\"20940\",\"2\":\"El Centro\",\"3\":\"3640.41\",\"4\":\"704.78\",\"5\":\"2935.62\"},{\"1\":\"24660\",\"2\":\"Greensboro\",\"3\":\"3640.80\",\"4\":\"2014.47\",\"5\":\"1626.39\"},{\"1\":\"40530\",\"2\":\"Rockport\",\"3\":\"3642.37\",\"4\":\"594.36\",\"5\":\"3047.99\"},{\"1\":\"12580\",\"2\":\"Baltimore\",\"3\":\"3649.32\",\"4\":\"2382.80\",\"5\":\"1266.50\"},{\"1\":\"16100\",\"2\":\"Carlsbad\",\"3\":\"3655.02\",\"4\":\"1709.95\",\"5\":\"1945.07\"},{\"1\":\"37120\",\"2\":\"Ozark\",\"3\":\"3659.98\",\"4\":\"1053.62\",\"5\":\"2606.34\"},{\"1\":\"34420\",\"2\":\"Mount Pleasant\",\"3\":\"3660.18\",\"4\":\"1366.25\",\"5\":\"2293.91\"},{\"1\":\"27340\",\"2\":\"Jacksonville\",\"3\":\"3661.29\",\"4\":\"1537.93\",\"5\":\"2123.35\"},{\"1\":\"15500\",\"2\":\"Burlington\",\"3\":\"3664.64\",\"4\":\"1927.39\",\"5\":\"1737.24\"},{\"1\":\"29460\",\"2\":\"Lakeland\",\"3\":\"3665.32\",\"4\":\"387.01\",\"5\":\"3278.29\"},{\"1\":\"40820\",\"2\":\"Ruston\",\"3\":\"3666.26\",\"4\":\"1220.49\",\"5\":\"2445.77\"},{\"1\":\"27140\",\"2\":\"Jackson\",\"3\":\"3666.44\",\"4\":\"1156.97\",\"5\":\"2509.49\"},{\"1\":\"15220\",\"2\":\"Brownwood\",\"3\":\"3667.91\",\"4\":\"1431.15\",\"5\":\"2236.73\"},{\"1\":\"44860\",\"2\":\"Sulphur Springs\",\"3\":\"3668.17\",\"4\":\"1303.57\",\"5\":\"2364.59\"},{\"1\":\"29180\",\"2\":\"Lafayette\",\"3\":\"3670.96\",\"4\":\"824.92\",\"5\":\"2846.06\"},{\"1\":\"30300\",\"2\":\"Lewiston, ID\",\"3\":\"3673.98\",\"4\":\"2848.38\",\"5\":\"825.55\"},{\"1\":\"40220\",\"2\":\"Roanoke\",\"3\":\"3675.85\",\"4\":\"2260.01\",\"5\":\"1415.87\"},{\"1\":\"38380\",\"2\":\"Plainview\",\"3\":\"3676.24\",\"4\":\"2257.57\",\"5\":\"1418.63\"},{\"1\":\"10620\",\"2\":\"Albemarle\",\"3\":\"3676.50\",\"4\":\"1867.84\",\"5\":\"1808.64\"},{\"1\":\"17900\",\"2\":\"Columbia\",\"3\":\"3680.00\",\"4\":\"1304.01\",\"5\":\"2375.98\"},{\"1\":\"44420\",\"2\":\"Staunton\",\"3\":\"3694.01\",\"4\":\"2590.80\",\"5\":\"1103.22\"},{\"1\":\"34260\",\"2\":\"Mountain Home\",\"3\":\"3694.23\",\"4\":\"2062.52\",\"5\":\"1631.76\"},{\"1\":\"44340\",\"2\":\"Statesboro\",\"3\":\"3695.06\",\"4\":\"1061.34\",\"5\":\"2633.74\"},{\"1\":\"31340\",\"2\":\"Lynchburg\",\"3\":\"3696.24\",\"4\":\"2349.02\",\"5\":\"1347.27\"},{\"1\":\"16820\",\"2\":\"Charlottesville\",\"3\":\"3696.67\",\"4\":\"2227.73\",\"5\":\"1468.96\"},{\"1\":\"25460\",\"2\":\"Harrison\",\"3\":\"3698.19\",\"4\":\"2180.88\",\"5\":\"1517.33\"},{\"1\":\"26420\",\"2\":\"Houston\",\"3\":\"3705.67\",\"4\":\"711.82\",\"5\":\"2993.87\"},{\"1\":\"12700\",\"2\":\"Barnstable Town\",\"3\":\"3707.15\",\"4\":\"3185.14\",\"5\":\"521.99\"},{\"1\":\"40460\",\"2\":\"Rockingham\",\"3\":\"3711.40\",\"4\":\"1736.81\",\"5\":\"1974.57\"},{\"1\":\"45500\",\"2\":\"Texarkana, TX\",\"3\":\"3719.03\",\"4\":\"1412.83\",\"5\":\"2306.22\"},{\"1\":\"18060\",\"2\":\"Columbus\",\"3\":\"3719.82\",\"4\":\"1510.40\",\"5\":\"2209.39\"},{\"1\":\"44940\",\"2\":\"Sumter\",\"3\":\"3725.85\",\"4\":\"1404.45\",\"5\":\"2321.40\"},{\"1\":\"16860\",\"2\":\"Chattanooga, TN\",\"3\":\"3727.00\",\"4\":\"1739.41\",\"5\":\"1987.58\"},{\"1\":\"48220\",\"2\":\"Weatherford\",\"3\":\"3727.16\",\"4\":\"2162.20\",\"5\":\"1565.00\"},{\"1\":\"12100\",\"2\":\"Atlantic City\",\"3\":\"3730.15\",\"4\":\"2619.04\",\"5\":\"1111.15\"},{\"1\":\"25620\",\"2\":\"Hattiesburg\",\"3\":\"3732.20\",\"4\":\"1061.34\",\"5\":\"2670.85\"},{\"1\":\"23620\",\"2\":\"Gainesville\",\"3\":\"3735.88\",\"4\":\"1589.63\",\"5\":\"2146.19\"},{\"1\":\"22180\",\"2\":\"Fayetteville\",\"3\":\"3737.98\",\"4\":\"1596.89\",\"5\":\"2141.09\"},{\"1\":\"32300\",\"2\":\"Martinsville\",\"3\":\"3739.19\",\"4\":\"2171.34\",\"5\":\"1567.87\"},{\"1\":\"37300\",\"2\":\"Palestine\",\"3\":\"3739.65\",\"4\":\"1100.25\",\"5\":\"2639.37\"},{\"1\":\"12900\",\"2\":\"Batesville\",\"3\":\"3746.22\",\"4\":\"1984.86\",\"5\":\"1761.35\"},{\"1\":\"19260\",\"2\":\"Danville\",\"3\":\"3748.37\",\"4\":\"2082.61\",\"5\":\"1665.83\"},{\"1\":\"17300\",\"2\":\"Clarksville, TN\",\"3\":\"3748.95\",\"4\":\"2141.03\",\"5\":\"1607.87\"},{\"1\":\"40740\",\"2\":\"Roswell\",\"3\":\"3755.02\",\"4\":\"1946.59\",\"5\":\"1808.38\"},{\"1\":\"39580\",\"2\":\"Raleigh\",\"3\":\"3755.69\",\"4\":\"1799.48\",\"5\":\"1956.19\"},{\"1\":\"22380\",\"2\":\"Flagstaff\",\"3\":\"3756.84\",\"4\":\"3035.83\",\"5\":\"721.01\"},{\"1\":\"34060\",\"2\":\"Morgantown\",\"3\":\"3759.15\",\"4\":\"2706.69\",\"5\":\"1052.47\"},{\"1\":\"19100\",\"2\":\"Dallas\",\"3\":\"3759.28\",\"4\":\"1315.43\",\"5\":\"2443.85\"},{\"1\":\"45300\",\"2\":\"Tampa\",\"3\":\"3759.68\",\"4\":\"336.80\",\"5\":\"3422.88\"},{\"1\":\"15680\",\"2\":\"California\",\"3\":\"3761.25\",\"4\":\"2336.43\",\"5\":\"1424.80\"},{\"1\":\"17980\",\"2\":\"Columbus, GA\",\"3\":\"3766.14\",\"4\":\"1261.60\",\"5\":\"2504.56\"},{\"1\":\"43300\",\"2\":\"Sherman\",\"3\":\"3767.64\",\"4\":\"1497.08\",\"5\":\"2270.54\"},{\"1\":\"37580\",\"2\":\"Paris\",\"3\":\"3773.39\",\"4\":\"1536.86\",\"5\":\"2236.50\"},{\"1\":\"17580\",\"2\":\"Clovis\",\"3\":\"3775.88\",\"4\":\"2469.03\",\"5\":\"1306.80\"},{\"1\":\"24140\",\"2\":\"Goldsboro\",\"3\":\"3776.23\",\"4\":\"1584.60\",\"5\":\"2191.58\"},{\"1\":\"34860\",\"2\":\"Nacogdoches\",\"3\":\"3780.12\",\"4\":\"1180.33\",\"5\":\"2599.79\"},{\"1\":\"40060\",\"2\":\"Richmond\",\"3\":\"3782.81\",\"4\":\"2058.83\",\"5\":\"1723.97\"},{\"1\":\"35620\",\"2\":\"New York\",\"3\":\"3785.67\",\"4\":\"2874.97\",\"5\":\"910.69\"},{\"1\":\"38220\",\"2\":\"Pine Bluff\",\"3\":\"3787.23\",\"4\":\"1611.39\",\"5\":\"2175.88\"},{\"1\":\"46340\",\"2\":\"Tyler\",\"3\":\"3787.70\",\"4\":\"1172.62\",\"5\":\"2615.11\"},{\"1\":\"24900\",\"2\":\"Greenwood\",\"3\":\"3789.30\",\"4\":\"1439.76\",\"5\":\"2349.52\"},{\"1\":\"40580\",\"2\":\"Rocky Mount\",\"3\":\"3789.54\",\"4\":\"1828.51\",\"5\":\"1961.07\"},{\"1\":\"22220\",\"2\":\"Fayetteville\",\"3\":\"3791.69\",\"4\":\"2237.04\",\"5\":\"1554.65\"},{\"1\":\"35980\",\"2\":\"Norwich\",\"3\":\"3797.46\",\"4\":\"3200.70\",\"5\":\"596.78\"},{\"1\":\"32820\",\"2\":\"Memphis, TN\",\"3\":\"3798.39\",\"4\":\"1812.40\",\"5\":\"1985.98\"},{\"1\":\"31300\",\"2\":\"Lumberton\",\"3\":\"3799.35\",\"4\":\"1549.97\",\"5\":\"2249.44\"},{\"1\":\"32540\",\"2\":\"McAlester\",\"3\":\"3800.13\",\"4\":\"1699.81\",\"5\":\"2100.35\"},{\"1\":\"29900\",\"2\":\"Laurinburg\",\"3\":\"3800.91\",\"4\":\"1641.38\",\"5\":\"2159.53\"},{\"1\":\"22500\",\"2\":\"Florence\",\"3\":\"3802.87\",\"4\":\"1420.20\",\"5\":\"2382.66\"},{\"1\":\"33860\",\"2\":\"Montgomery\",\"3\":\"3803.64\",\"4\":\"1182.74\",\"5\":\"2620.88\"},{\"1\":\"47900\",\"2\":\"Washington\",\"3\":\"3803.96\",\"4\":\"2419.50\",\"5\":\"1384.48\"},{\"1\":\"48460\",\"2\":\"West Plains\",\"3\":\"3808.65\",\"4\":\"2400.84\",\"5\":\"1407.79\"},{\"1\":\"12460\",\"2\":\"Bainbridge\",\"3\":\"3810.03\",\"4\":\"850.80\",\"5\":\"2959.24\"},{\"1\":\"30460\",\"2\":\"Lexington\",\"3\":\"3814.40\",\"4\":\"2626.19\",\"5\":\"1188.20\"},{\"1\":\"24740\",\"2\":\"Greenville\",\"3\":\"3822.42\",\"4\":\"1519.30\",\"5\":\"2303.14\"},{\"1\":\"26660\",\"2\":\"Huntsville\",\"3\":\"3822.63\",\"4\":\"923.20\",\"5\":\"2899.44\"},{\"1\":\"33260\",\"2\":\"Midland\",\"3\":\"3824.17\",\"4\":\"1586.99\",\"5\":\"2237.19\"},{\"1\":\"28540\",\"2\":\"Ketchikan\",\"3\":\"3827.68\",\"4\":\"3768.00\",\"5\":\"59.72\"},{\"1\":\"45220\",\"2\":\"Tallahassee\",\"3\":\"3834.78\",\"4\":\"867.06\",\"5\":\"2967.70\"},{\"1\":\"10180\",\"2\":\"Abilene\",\"3\":\"3839.04\",\"4\":\"1516.85\",\"5\":\"2322.19\"},{\"1\":\"28420\",\"2\":\"Kennewick\",\"3\":\"3841.67\",\"4\":\"2909.49\",\"5\":\"932.16\"},{\"1\":\"43320\",\"2\":\"Show Low\",\"3\":\"3842.34\",\"4\":\"2862.27\",\"5\":\"980.05\"},{\"1\":\"14180\",\"2\":\"Blytheville\",\"3\":\"3847.98\",\"4\":\"1919.42\",\"5\":\"1928.59\"},{\"1\":\"37980\",\"2\":\"Philadelphia\",\"3\":\"3848.96\",\"4\":\"2735.69\",\"5\":\"1113.28\"},{\"1\":\"46660\",\"2\":\"Valdosta\",\"3\":\"3849.92\",\"4\":\"918.29\",\"5\":\"2931.64\"},{\"1\":\"47580\",\"2\":\"Warner Robins\",\"3\":\"3850.25\",\"4\":\"1246.75\",\"5\":\"2603.48\"},{\"1\":\"46620\",\"2\":\"Uvalde\",\"3\":\"3853.50\",\"4\":\"834.66\",\"5\":\"3018.89\"},{\"1\":\"40660\",\"2\":\"Rome\",\"3\":\"3855.27\",\"4\":\"1730.30\",\"5\":\"2125.02\"},{\"1\":\"30780\",\"2\":\"Little Rock\",\"3\":\"3856.10\",\"4\":\"1659.35\",\"5\":\"2196.76\"},{\"1\":\"20100\",\"2\":\"Dover\",\"3\":\"3859.38\",\"4\":\"2525.24\",\"5\":\"1334.08\"},{\"1\":\"17780\",\"2\":\"College Station\",\"3\":\"3859.55\",\"4\":\"1048.63\",\"5\":\"2810.89\"},{\"1\":\"18620\",\"2\":\"Corsicana\",\"3\":\"3860.28\",\"4\":\"1160.55\",\"5\":\"2699.73\"},{\"1\":\"37140\",\"2\":\"Paducah, KY\",\"3\":\"3863.57\",\"4\":\"2251.04\",\"5\":\"1612.51\"},{\"1\":\"24420\",\"2\":\"Grants Pass\",\"3\":\"3864.39\",\"4\":\"3528.81\",\"5\":\"335.54\"},{\"1\":\"21980\",\"2\":\"Fallon\",\"3\":\"3866.79\",\"4\":\"2991.41\",\"5\":\"875.38\"},{\"1\":\"16020\",\"2\":\"Cape Girardeau, MO\",\"3\":\"3867.38\",\"4\":\"2161.69\",\"5\":\"1705.67\"},{\"1\":\"39300\",\"2\":\"Providence\",\"3\":\"3868.03\",\"4\":\"3224.59\",\"5\":\"643.46\"},{\"1\":\"16620\",\"2\":\"Charleston\",\"3\":\"3868.94\",\"4\":\"2459.33\",\"5\":\"1409.63\"},{\"1\":\"24180\",\"2\":\"Granbury\",\"3\":\"3872.71\",\"4\":\"1236.80\",\"5\":\"2635.90\"},{\"1\":\"28660\",\"2\":\"Killeen\",\"3\":\"3874.58\",\"4\":\"1196.65\",\"5\":\"2677.92\"},{\"1\":\"20340\",\"2\":\"Duncan\",\"3\":\"3882.34\",\"4\":\"1749.14\",\"5\":\"2133.18\"},{\"1\":\"20980\",\"2\":\"El Dorado\",\"3\":\"3885.05\",\"4\":\"1462.16\",\"5\":\"2422.93\"},{\"1\":\"18580\",\"2\":\"Corpus Christi\",\"3\":\"3887.70\",\"4\":\"480.96\",\"5\":\"3406.75\"},{\"1\":\"21640\",\"2\":\"Eufaula, AL\",\"3\":\"3888.78\",\"4\":\"1104.08\",\"5\":\"2784.71\"},{\"1\":\"20460\",\"2\":\"Durant\",\"3\":\"3888.92\",\"4\":\"1511.52\",\"5\":\"2377.42\"},{\"1\":\"43340\",\"2\":\"Shreveport\",\"3\":\"3889.49\",\"4\":\"1229.03\",\"5\":\"2660.48\"},{\"1\":\"45940\",\"2\":\"Trenton\",\"3\":\"3889.73\",\"4\":\"2756.59\",\"5\":\"1133.15\"},{\"1\":\"31180\",\"2\":\"Lubbock\",\"3\":\"3890.32\",\"4\":\"2072.33\",\"5\":\"1817.99\"},{\"1\":\"20900\",\"2\":\"El Campo\",\"3\":\"3891.37\",\"4\":\"756.15\",\"5\":\"3135.20\"},{\"1\":\"46180\",\"2\":\"Tupelo\",\"3\":\"3893.79\",\"4\":\"1665.95\",\"5\":\"2227.83\"},{\"1\":\"47240\",\"2\":\"Vineyard Haven\",\"3\":\"3895.35\",\"4\":\"3353.30\",\"5\":\"542.10\"},{\"1\":\"47220\",\"2\":\"Vineland\",\"3\":\"3899.92\",\"4\":\"2725.58\",\"5\":\"1174.39\"},{\"1\":\"31140\",\"2\":\"Louisville/Jefferson County, KY\",\"3\":\"3905.89\",\"4\":\"2336.03\",\"5\":\"1569.88\"},{\"1\":\"10500\",\"2\":\"Albany\",\"3\":\"3907.13\",\"4\":\"1031.25\",\"5\":\"2875.94\"},{\"1\":\"31260\",\"2\":\"Lufkin\",\"3\":\"3910.23\",\"4\":\"1022.42\",\"5\":\"2887.84\"},{\"1\":\"27540\",\"2\":\"Jasper\",\"3\":\"3911.57\",\"4\":\"2553.06\",\"5\":\"1358.50\"},{\"1\":\"13060\",\"2\":\"Bay City\",\"3\":\"3912.68\",\"4\":\"648.54\",\"5\":\"3264.15\"},{\"1\":\"36740\",\"2\":\"Orlando\",\"3\":\"3915.23\",\"4\":\"389.33\",\"5\":\"3525.89\"},{\"1\":\"34980\",\"2\":\"Nashville\",\"3\":\"3916.39\",\"4\":\"1979.39\",\"5\":\"1937.00\"},{\"1\":\"10380\",\"2\":\"Aguadilla\",\"3\":\"3921.40\",\"4\":\"0.02\",\"5\":\"3921.37\"},{\"1\":\"33740\",\"2\":\"Monroe\",\"3\":\"3923.69\",\"4\":\"1293.34\",\"5\":\"2630.39\"},{\"1\":\"23180\",\"2\":\"Frankfort\",\"3\":\"3925.24\",\"4\":\"2578.64\",\"5\":\"1346.63\"},{\"1\":\"43060\",\"2\":\"Shawnee\",\"3\":\"3925.71\",\"4\":\"1755.80\",\"5\":\"2169.89\"},{\"1\":\"40780\",\"2\":\"Russellville\",\"3\":\"3926.52\",\"4\":\"1773.83\",\"5\":\"2152.71\"},{\"1\":\"48300\",\"2\":\"Wenatchee\",\"3\":\"3927.67\",\"4\":\"3210.64\",\"5\":\"717.01\"},{\"1\":\"47380\",\"2\":\"Waco\",\"3\":\"3933.57\",\"4\":\"1226.77\",\"5\":\"2706.74\"},{\"1\":\"25180\",\"2\":\"Hagerstown\",\"3\":\"3938.71\",\"4\":\"2762.76\",\"5\":\"1175.96\"},{\"1\":\"12420\",\"2\":\"Austin\",\"3\":\"3941.03\",\"4\":\"980.70\",\"5\":\"2960.30\"},{\"1\":\"14860\",\"2\":\"Bridgeport\",\"3\":\"3945.24\",\"4\":\"3142.60\",\"5\":\"802.65\"},{\"1\":\"22100\",\"2\":\"Farmington\",\"3\":\"3949.03\",\"4\":\"2578.18\",\"5\":\"1370.78\"},{\"1\":\"33100\",\"2\":\"Miami\",\"3\":\"3954.51\",\"4\":\"119.57\",\"5\":\"3834.93\"},{\"1\":\"10780\",\"2\":\"Alexandria\",\"3\":\"3956.37\",\"4\":\"1069.47\",\"5\":\"2886.88\"},{\"1\":\"35300\",\"2\":\"New Haven\",\"3\":\"3964.49\",\"4\":\"3221.56\",\"5\":\"742.90\"},{\"1\":\"21060\",\"2\":\"Elizabethtown\",\"3\":\"3965.30\",\"4\":\"2527.65\",\"5\":\"1437.69\"},{\"1\":\"22900\",\"2\":\"Fort Smith, AR\",\"3\":\"3968.33\",\"4\":\"1794.57\",\"5\":\"2173.82\"},{\"1\":\"45140\",\"2\":\"Tahlequah\",\"3\":\"3975.58\",\"4\":\"2159.23\",\"5\":\"1816.40\"},{\"1\":\"18020\",\"2\":\"Columbus\",\"3\":\"3981.99\",\"4\":\"3058.19\",\"5\":\"923.78\"},{\"1\":\"11620\",\"2\":\"Ardmore\",\"3\":\"3984.16\",\"4\":\"1664.32\",\"5\":\"2319.80\"},{\"1\":\"21180\",\"2\":\"Elkins\",\"3\":\"3986.78\",\"4\":\"3141.36\",\"5\":\"845.43\"},{\"1\":\"41660\",\"2\":\"San Angelo\",\"3\":\"3990.37\",\"4\":\"1366.54\",\"5\":\"2623.82\"},{\"1\":\"15980\",\"2\":\"Cape Coral\",\"3\":\"3995.46\",\"4\":\"222.30\",\"5\":\"3773.15\"},{\"1\":\"32940\",\"2\":\"Meridian\",\"3\":\"4001.00\",\"4\":\"1365.41\",\"5\":\"2635.61\"},{\"1\":\"49260\",\"2\":\"Woodward\",\"3\":\"4001.53\",\"4\":\"2373.30\",\"5\":\"1628.20\"},{\"1\":\"14260\",\"2\":\"Boise City\",\"3\":\"4001.85\",\"4\":\"3196.81\",\"5\":\"805.06\"},{\"1\":\"34780\",\"2\":\"Muskogee\",\"3\":\"4006.02\",\"4\":\"1986.93\",\"5\":\"2019.14\"},{\"1\":\"19620\",\"2\":\"Del Rio\",\"3\":\"4007.40\",\"4\":\"857.13\",\"5\":\"3150.23\"},{\"1\":\"41700\",\"2\":\"San Antonio\",\"3\":\"4008.98\",\"4\":\"848.87\",\"5\":\"3160.11\"},{\"1\":\"27900\",\"2\":\"Joplin\",\"3\":\"4014.03\",\"4\":\"2355.87\",\"5\":\"1658.19\"},{\"1\":\"49620\",\"2\":\"York\",\"3\":\"4017.34\",\"4\":\"2935.05\",\"5\":\"1082.28\"},{\"1\":\"41620\",\"2\":\"Salt Lake City\",\"3\":\"4025.09\",\"4\":\"3142.75\",\"5\":\"882.34\"},{\"1\":\"38300\",\"2\":\"Pittsburgh\",\"3\":\"4025.99\",\"4\":\"3223.30\",\"5\":\"802.69\"},{\"1\":\"26860\",\"2\":\"Indiana\",\"3\":\"4032.26\",\"4\":\"3340.02\",\"5\":\"692.22\"},{\"1\":\"46140\",\"2\":\"Tulsa\",\"3\":\"4036.77\",\"4\":\"2012.99\",\"5\":\"2023.80\"},{\"1\":\"21780\",\"2\":\"Evansville, IN\",\"3\":\"4039.35\",\"4\":\"2509.29\",\"5\":\"1530.09\"},{\"1\":\"16060\",\"2\":\"Carbondale\",\"3\":\"4040.78\",\"4\":\"2523.84\",\"5\":\"1516.94\"},{\"1\":\"49420\",\"2\":\"Yakima\",\"3\":\"4041.75\",\"4\":\"3266.67\",\"5\":\"775.12\"},{\"1\":\"48540\",\"2\":\"Wheeling, WV\",\"3\":\"4042.71\",\"4\":\"3155.50\",\"5\":\"887.19\"},{\"1\":\"22140\",\"2\":\"Farmington\",\"3\":\"4047.56\",\"4\":\"3196.98\",\"5\":\"850.55\"},{\"1\":\"28580\",\"2\":\"Key West\",\"3\":\"4048.74\",\"4\":\"42.53\",\"5\":\"4006.21\"},{\"1\":\"36420\",\"2\":\"Oklahoma City\",\"3\":\"4049.63\",\"4\":\"2015.32\",\"5\":\"2034.29\"},{\"1\":\"11100\",\"2\":\"Amarillo\",\"3\":\"4054.64\",\"4\":\"2523.08\",\"5\":\"1531.57\"},{\"1\":\"34500\",\"2\":\"Mount Vernon\",\"3\":\"4058.24\",\"4\":\"2649.97\",\"5\":\"1408.28\"},{\"1\":\"20820\",\"2\":\"Effingham\",\"3\":\"4060.11\",\"4\":\"2790.66\",\"5\":\"1269.45\"},{\"1\":\"42140\",\"2\":\"Santa Fe\",\"3\":\"4060.26\",\"4\":\"3302.80\",\"5\":\"757.46\"},{\"1\":\"25420\",\"2\":\"Harrisburg\",\"3\":\"4063.56\",\"4\":\"2898.43\",\"5\":\"1165.17\"},{\"1\":\"30020\",\"2\":\"Lawton\",\"3\":\"4065.37\",\"4\":\"1833.62\",\"5\":\"2231.73\"},{\"1\":\"30140\",\"2\":\"Lebanon\",\"3\":\"4066.48\",\"4\":\"3060.16\",\"5\":\"1006.29\"},{\"1\":\"34180\",\"2\":\"Moses Lake\",\"3\":\"4071.59\",\"4\":\"3352.98\",\"5\":\"718.59\"},{\"1\":\"39740\",\"2\":\"Reading\",\"3\":\"4078.79\",\"4\":\"2919.03\",\"5\":\"1159.77\"},{\"1\":\"44300\",\"2\":\"State College\",\"3\":\"4086.10\",\"4\":\"3430.42\",\"5\":\"655.62\"},{\"1\":\"49780\",\"2\":\"Zanesville\",\"3\":\"4087.79\",\"4\":\"3070.57\",\"5\":\"1017.20\"},{\"1\":\"36260\",\"2\":\"Ogden\",\"3\":\"4090.33\",\"4\":\"3355.28\",\"5\":\"735.05\"},{\"1\":\"16460\",\"2\":\"Centralia\",\"3\":\"4099.46\",\"4\":\"2631.86\",\"5\":\"1467.58\"},{\"1\":\"36980\",\"2\":\"Owensboro\",\"3\":\"4107.08\",\"4\":\"2407.44\",\"5\":\"1699.67\"},{\"1\":\"10900\",\"2\":\"Allentown\",\"3\":\"4107.25\",\"4\":\"3061.39\",\"5\":\"1045.85\"},{\"1\":\"11060\",\"2\":\"Altus\",\"3\":\"4108.82\",\"4\":\"1897.04\",\"5\":\"2211.78\"},{\"1\":\"18140\",\"2\":\"Columbus\",\"3\":\"4110.77\",\"4\":\"3084.24\",\"5\":\"1026.51\"},{\"1\":\"29540\",\"2\":\"Lancaster\",\"3\":\"4118.76\",\"4\":\"3042.34\",\"5\":\"1076.41\"},{\"1\":\"17140\",\"2\":\"Cincinnati, OH\",\"3\":\"4120.50\",\"4\":\"2853.86\",\"5\":\"1266.67\"},{\"1\":\"29260\",\"2\":\"La Grande\",\"3\":\"4125.89\",\"4\":\"3609.71\",\"5\":\"516.19\"},{\"1\":\"39100\",\"2\":\"Poughkeepsie\",\"3\":\"4127.05\",\"4\":\"3347.72\",\"5\":\"779.31\"},{\"1\":\"38620\",\"2\":\"Ponca City\",\"3\":\"4127.29\",\"4\":\"2216.12\",\"5\":\"1911.17\"},{\"1\":\"29780\",\"2\":\"Las Vegas\",\"3\":\"4137.89\",\"4\":\"3576.42\",\"5\":\"561.47\"},{\"1\":\"48180\",\"2\":\"Waycross\",\"3\":\"4140.15\",\"4\":\"853.05\",\"5\":\"3287.09\"},{\"1\":\"42620\",\"2\":\"Searcy\",\"3\":\"4140.94\",\"4\":\"1880.31\",\"5\":\"2260.65\"},{\"1\":\"39340\",\"2\":\"Provo\",\"3\":\"4148.63\",\"4\":\"3392.00\",\"5\":\"756.66\"},{\"1\":\"19740\",\"2\":\"Denver\",\"3\":\"4156.57\",\"4\":\"3456.22\",\"5\":\"700.36\"},{\"1\":\"17700\",\"2\":\"Coffeyville\",\"3\":\"4159.52\",\"4\":\"2295.85\",\"5\":\"1863.73\"},{\"1\":\"33940\",\"2\":\"Montrose\",\"3\":\"4162.12\",\"4\":\"3464.53\",\"5\":\"697.62\"},{\"1\":\"44660\",\"2\":\"Stillwater\",\"3\":\"4169.44\",\"4\":\"2052.21\",\"5\":\"2117.20\"},{\"1\":\"42780\",\"2\":\"Selinsgrove\",\"3\":\"4176.30\",\"4\":\"3173.48\",\"5\":\"1002.79\"},{\"1\":\"24300\",\"2\":\"Grand Junction\",\"3\":\"4180.31\",\"4\":\"3259.68\",\"5\":\"920.62\"},{\"1\":\"11020\",\"2\":\"Altoona\",\"3\":\"4183.18\",\"4\":\"3395.70\",\"5\":\"787.47\"},{\"1\":\"36620\",\"2\":\"Ontario, OR\",\"3\":\"4190.00\",\"4\":\"3430.23\",\"5\":\"759.75\"},{\"1\":\"44180\",\"2\":\"Springfield\",\"3\":\"4191.90\",\"4\":\"2623.08\",\"5\":\"1568.83\"},{\"1\":\"25840\",\"2\":\"Hermiston\",\"3\":\"4192.46\",\"4\":\"3737.93\",\"5\":\"454.56\"},{\"1\":\"28140\",\"2\":\"Kansas City, MO\",\"3\":\"4205.99\",\"4\":\"2743.53\",\"5\":\"1462.45\"},{\"1\":\"48660\",\"2\":\"Wichita Falls\",\"3\":\"4212.43\",\"4\":\"1777.75\",\"5\":\"2434.69\"},{\"1\":\"49060\",\"2\":\"Winfield\",\"3\":\"4213.45\",\"4\":\"2430.76\",\"5\":\"1782.70\"},{\"1\":\"48700\",\"2\":\"Williamsport\",\"3\":\"4218.03\",\"4\":\"3219.98\",\"5\":\"998.01\"},{\"1\":\"35060\",\"2\":\"Natchitoches\",\"3\":\"4224.52\",\"4\":\"1136.95\",\"5\":\"3087.58\"},{\"1\":\"14460\",\"2\":\"Boston\",\"3\":\"4228.59\",\"4\":\"3533.46\",\"5\":\"695.14\"},{\"1\":\"34940\",\"2\":\"Naples\",\"3\":\"4232.10\",\"4\":\"201.06\",\"5\":\"4031.05\"},{\"1\":\"19430\",\"2\":\"Dayton\",\"3\":\"4232.36\",\"4\":\"3149.61\",\"5\":\"1082.72\"},{\"1\":\"44060\",\"2\":\"Spokane\",\"3\":\"4234.86\",\"4\":\"3719.52\",\"5\":\"515.32\"},{\"1\":\"25540\",\"2\":\"Hartford\",\"3\":\"4235.37\",\"4\":\"3259.61\",\"5\":\"975.79\"},{\"1\":\"22660\",\"2\":\"Fort Collins\",\"3\":\"4235.89\",\"4\":\"3479.59\",\"5\":\"756.33\"},{\"1\":\"16260\",\"2\":\"Cedar City\",\"3\":\"4238.48\",\"4\":\"3571.37\",\"5\":\"667.06\"},{\"1\":\"42540\",\"2\":\"Scranton\",\"3\":\"4241.02\",\"4\":\"3381.21\",\"5\":\"859.85\"},{\"1\":\"48940\",\"2\":\"Wilmington\",\"3\":\"4241.87\",\"4\":\"3192.56\",\"5\":\"1049.32\"},{\"1\":\"41180\",\"2\":\"St. Louis, MO\",\"3\":\"4257.63\",\"4\":\"2663.39\",\"5\":\"1594.21\"},{\"1\":\"21260\",\"2\":\"Ellensburg\",\"3\":\"4258.23\",\"4\":\"3832.28\",\"5\":\"425.93\"},{\"1\":\"18660\",\"2\":\"Cortland\",\"3\":\"4258.93\",\"4\":\"3881.98\",\"5\":\"376.93\"},{\"1\":\"39220\",\"2\":\"Price\",\"3\":\"4262.93\",\"4\":\"3605.84\",\"5\":\"657.07\"},{\"1\":\"47660\",\"2\":\"Warrensburg\",\"3\":\"4266.53\",\"4\":\"2809.15\",\"5\":\"1457.37\"},{\"1\":\"17460\",\"2\":\"Cleveland\",\"3\":\"4269.28\",\"4\":\"3439.83\",\"5\":\"829.45\"},{\"1\":\"39420\",\"2\":\"Pullman\",\"3\":\"4273.04\",\"4\":\"3812.42\",\"5\":\"460.62\"},{\"1\":\"17820\",\"2\":\"Colorado Springs\",\"3\":\"4275.59\",\"4\":\"3672.52\",\"5\":\"603.06\"},{\"1\":\"26900\",\"2\":\"Indianapolis\",\"3\":\"4280.69\",\"4\":\"3127.93\",\"5\":\"1152.76\"},{\"1\":\"27300\",\"2\":\"Jacksonville\",\"3\":\"4282.87\",\"4\":\"3038.91\",\"5\":\"1243.94\"},{\"1\":\"36340\",\"2\":\"Oil City\",\"3\":\"4295.73\",\"4\":\"3729.26\",\"5\":\"566.47\"},{\"1\":\"16660\",\"2\":\"Charleston\",\"3\":\"4297.79\",\"4\":\"3156.30\",\"5\":\"1141.52\"},{\"1\":\"39460\",\"2\":\"Punta Gorda\",\"3\":\"4299.17\",\"4\":\"350.38\",\"5\":\"3948.77\"},{\"1\":\"47700\",\"2\":\"Warsaw\",\"3\":\"4302.90\",\"4\":\"3541.91\",\"5\":\"760.99\"},{\"1\":\"49340\",\"2\":\"Worcester, MA\",\"3\":\"4303.32\",\"4\":\"3620.07\",\"5\":\"683.24\"},{\"1\":\"23700\",\"2\":\"Gallup\",\"3\":\"4308.66\",\"4\":\"3661.47\",\"5\":\"647.11\"},{\"1\":\"39380\",\"2\":\"Pueblo\",\"3\":\"4309.87\",\"4\":\"3194.80\",\"5\":\"1115.06\"},{\"1\":\"24380\",\"2\":\"Grants\",\"3\":\"4312.83\",\"4\":\"3692.41\",\"5\":\"620.41\"},{\"1\":\"48620\",\"2\":\"Wichita\",\"3\":\"4313.85\",\"4\":\"2883.64\",\"5\":\"1430.22\"},{\"1\":\"13460\",\"2\":\"Bend\",\"3\":\"4316.36\",\"4\":\"3800.45\",\"5\":\"515.92\"},{\"1\":\"21420\",\"2\":\"Enid\",\"3\":\"4331.73\",\"4\":\"2315.50\",\"5\":\"2016.20\"},{\"1\":\"21380\",\"2\":\"Emporia\",\"3\":\"4334.02\",\"4\":\"2843.26\",\"5\":\"1490.76\"},{\"1\":\"46300\",\"2\":\"Twin Falls\",\"3\":\"4335.60\",\"4\":\"3655.30\",\"5\":\"680.32\"},{\"1\":\"10420\",\"2\":\"Akron\",\"3\":\"4338.06\",\"4\":\"3411.96\",\"5\":\"926.07\"},{\"1\":\"34300\",\"2\":\"Mountain Home\",\"3\":\"4345.30\",\"4\":\"3537.91\",\"5\":\"807.34\"},{\"1\":\"29020\",\"2\":\"Kokomo\",\"3\":\"4349.78\",\"4\":\"3381.57\",\"5\":\"968.19\"},{\"1\":\"34620\",\"2\":\"Muncie\",\"3\":\"4350.02\",\"4\":\"3295.65\",\"5\":\"1054.37\"},{\"1\":\"31740\",\"2\":\"Manhattan\",\"3\":\"4350.20\",\"4\":\"2778.91\",\"5\":\"1571.27\"},{\"1\":\"44220\",\"2\":\"Springfield\",\"3\":\"4351.27\",\"4\":\"3330.01\",\"5\":\"1021.23\"},{\"1\":\"17660\",\"2\":\"Coeur d'Alene\",\"3\":\"4352.45\",\"4\":\"3856.00\",\"5\":\"496.46\"},{\"1\":\"21500\",\"2\":\"Erie\",\"3\":\"4353.35\",\"4\":\"3608.53\",\"5\":\"744.83\"},{\"1\":\"30580\",\"2\":\"Liberal\",\"3\":\"4358.00\",\"4\":\"2803.93\",\"5\":\"1554.09\"},{\"1\":\"44780\",\"2\":\"Sturgis\",\"3\":\"4366.74\",\"4\":\"3623.49\",\"5\":\"743.18\"},{\"1\":\"45380\",\"2\":\"Taylorville\",\"3\":\"4367.07\",\"4\":\"3112.52\",\"5\":\"1254.50\"},{\"1\":\"27460\",\"2\":\"Jamestown\",\"3\":\"4386.65\",\"4\":\"3822.79\",\"5\":\"563.83\"},{\"1\":\"20180\",\"2\":\"DuBois\",\"3\":\"4407.92\",\"4\":\"3715.48\",\"5\":\"692.44\"},{\"1\":\"19180\",\"2\":\"Danville\",\"3\":\"4407.97\",\"4\":\"3340.20\",\"5\":\"1067.77\"},{\"1\":\"35660\",\"2\":\"Niles\",\"3\":\"4409.59\",\"4\":\"3672.59\",\"5\":\"736.99\"},{\"1\":\"49080\",\"2\":\"Winnemucca\",\"3\":\"4409.71\",\"4\":\"3724.20\",\"5\":\"685.49\"},{\"1\":\"39500\",\"2\":\"Quincy, IL\",\"3\":\"4416.86\",\"4\":\"3204.07\",\"5\":\"1212.77\"},{\"1\":\"33780\",\"2\":\"Monroe\",\"3\":\"4421.56\",\"4\":\"3579.03\",\"5\":\"842.47\"},{\"1\":\"15420\",\"2\":\"Burley\",\"3\":\"4425.48\",\"4\":\"3831.50\",\"5\":\"593.98\"},{\"1\":\"40380\",\"2\":\"Rochester\",\"3\":\"4425.67\",\"4\":\"3707.62\",\"5\":\"718.04\"},{\"1\":\"44100\",\"2\":\"Springfield\",\"3\":\"4426.14\",\"4\":\"3079.93\",\"5\":\"1346.24\"},{\"1\":\"31700\",\"2\":\"Manchester\",\"3\":\"4427.10\",\"4\":\"3576.89\",\"5\":\"850.23\"},{\"1\":\"49660\",\"2\":\"Youngstown\",\"3\":\"4430.50\",\"4\":\"3602.29\",\"5\":\"828.23\"},{\"1\":\"15180\",\"2\":\"Brownsville\",\"3\":\"4434.83\",\"4\":\"366.46\",\"5\":\"4068.36\"},{\"1\":\"29200\",\"2\":\"Lafayette\",\"3\":\"4435.48\",\"4\":\"3360.49\",\"5\":\"1075.02\"},{\"1\":\"28900\",\"2\":\"Klamath Falls\",\"3\":\"4444.28\",\"4\":\"3956.31\",\"5\":\"487.94\"},{\"1\":\"19820\",\"2\":\"Detroit\",\"3\":\"4450.02\",\"4\":\"3655.04\",\"5\":\"794.97\"},{\"1\":\"31900\",\"2\":\"Mansfield\",\"3\":\"4451.49\",\"4\":\"3585.82\",\"5\":\"865.65\"},{\"1\":\"45820\",\"2\":\"Topeka\",\"3\":\"4451.68\",\"4\":\"2810.34\",\"5\":\"1641.31\"},{\"1\":\"38860\",\"2\":\"Portland\",\"3\":\"4454.20\",\"4\":\"3940.07\",\"5\":\"514.15\"},{\"1\":\"13540\",\"2\":\"Bennington\",\"3\":\"4462.14\",\"4\":\"3870.82\",\"5\":\"591.31\"},{\"1\":\"15380\",\"2\":\"Buffalo\",\"3\":\"4468.73\",\"4\":\"3868.20\",\"5\":\"600.52\"},{\"1\":\"26740\",\"2\":\"Hutchinson\",\"3\":\"4482.29\",\"4\":\"2764.78\",\"5\":\"1717.52\"},{\"1\":\"24460\",\"2\":\"Great Bend\",\"3\":\"4500.27\",\"4\":\"2983.05\",\"5\":\"1517.20\"},{\"1\":\"22300\",\"2\":\"Findlay\",\"3\":\"4503.29\",\"4\":\"3495.86\",\"5\":\"1007.44\"},{\"1\":\"15460\",\"2\":\"Burlington, IA\",\"3\":\"4511.01\",\"4\":\"3376.91\",\"5\":\"1134.10\"},{\"1\":\"21300\",\"2\":\"Elmira\",\"3\":\"4512.35\",\"4\":\"3748.77\",\"5\":\"763.64\"},{\"1\":\"45780\",\"2\":\"Toledo\",\"3\":\"4512.68\",\"4\":\"3623.38\",\"5\":\"889.30\"},{\"1\":\"41140\",\"2\":\"St. Joseph, MO\",\"3\":\"4512.79\",\"4\":\"3120.26\",\"5\":\"1392.52\"},{\"1\":\"47020\",\"2\":\"Victoria\",\"3\":\"4517.12\",\"4\":\"786.97\",\"5\":\"3730.16\"},{\"1\":\"34740\",\"2\":\"Muskegon\",\"3\":\"4518.17\",\"4\":\"3935.38\",\"5\":\"582.81\"},{\"1\":\"28860\",\"2\":\"Kirksville\",\"3\":\"4520.53\",\"4\":\"3338.97\",\"5\":\"1181.55\"},{\"1\":\"12980\",\"2\":\"Battle Creek\",\"3\":\"4520.96\",\"4\":\"3773.95\",\"5\":\"747.04\"},{\"1\":\"10580\",\"2\":\"Albany\",\"3\":\"4523.57\",\"4\":\"3703.39\",\"5\":\"820.14\"},{\"1\":\"21220\",\"2\":\"Elko\",\"3\":\"4524.61\",\"4\":\"3901.92\",\"5\":\"622.74\"},{\"1\":\"29060\",\"2\":\"Laconia\",\"3\":\"4532.52\",\"4\":\"3980.16\",\"5\":\"552.34\"},{\"1\":\"29620\",\"2\":\"Lansing\",\"3\":\"4534.09\",\"4\":\"3836.40\",\"5\":\"697.68\"},{\"1\":\"28300\",\"2\":\"Keene\",\"3\":\"4538.16\",\"4\":\"3941.47\",\"5\":\"596.65\"},{\"1\":\"23660\",\"2\":\"Galesburg\",\"3\":\"4538.52\",\"4\":\"3519.33\",\"5\":\"1019.18\"},{\"1\":\"16980\",\"2\":\"Chicago\",\"3\":\"4539.95\",\"4\":\"3737.83\",\"5\":\"802.13\"},{\"1\":\"44140\",\"2\":\"Springfield\",\"3\":\"4541.29\",\"4\":\"3720.14\",\"5\":\"821.21\"},{\"1\":\"28020\",\"2\":\"Kalamazoo\",\"3\":\"4547.43\",\"4\":\"3720.88\",\"5\":\"826.55\"},{\"1\":\"28780\",\"2\":\"Kingsville\",\"3\":\"4552.16\",\"4\":\"533.73\",\"5\":\"4018.47\"},{\"1\":\"37900\",\"2\":\"Peoria\",\"3\":\"4553.93\",\"4\":\"3318.76\",\"5\":\"1235.19\"},{\"1\":\"16580\",\"2\":\"Champaign\",\"3\":\"4558.90\",\"4\":\"3475.12\",\"5\":\"1083.77\"},{\"1\":\"23780\",\"2\":\"Garden City\",\"3\":\"4559.65\",\"4\":\"3161.83\",\"5\":\"1397.84\"},{\"1\":\"45060\",\"2\":\"Syracuse\",\"3\":\"4573.47\",\"4\":\"3891.73\",\"5\":\"681.73\"},{\"1\":\"38340\",\"2\":\"Pittsfield\",\"3\":\"4578.81\",\"4\":\"4025.39\",\"5\":\"553.40\"},{\"1\":\"24540\",\"2\":\"Greeley\",\"3\":\"4583.70\",\"4\":\"3827.44\",\"5\":\"756.23\"},{\"1\":\"40860\",\"2\":\"Rutland\",\"3\":\"4590.11\",\"4\":\"4133.61\",\"5\":\"456.50\"},{\"1\":\"10940\",\"2\":\"Alma\",\"3\":\"4600.88\",\"4\":\"4000.37\",\"5\":\"600.53\"},{\"1\":\"21140\",\"2\":\"Elkhart\",\"3\":\"4611.69\",\"4\":\"3734.59\",\"5\":\"877.10\"},{\"1\":\"20700\",\"2\":\"East Stroudsburg\",\"3\":\"4614.57\",\"4\":\"4158.60\",\"5\":\"455.95\"},{\"1\":\"27100\",\"2\":\"Jackson\",\"3\":\"4616.16\",\"4\":\"3865.62\",\"5\":\"750.52\"},{\"1\":\"36820\",\"2\":\"Oskaloosa\",\"3\":\"4618.39\",\"4\":\"3600.92\",\"5\":\"1017.45\"},{\"1\":\"37940\",\"2\":\"Peru\",\"3\":\"4625.62\",\"4\":\"3576.82\",\"5\":\"1048.83\"},{\"1\":\"13100\",\"2\":\"Beatrice\",\"3\":\"4628.60\",\"4\":\"3313.33\",\"5\":\"1315.24\"},{\"1\":\"20420\",\"2\":\"Durango\",\"3\":\"4630.00\",\"4\":\"4114.69\",\"5\":\"515.28\"},{\"1\":\"39540\",\"2\":\"Racine\",\"3\":\"4630.21\",\"4\":\"3983.43\",\"5\":\"646.83\"},{\"1\":\"45900\",\"2\":\"Traverse City\",\"3\":\"4638.36\",\"4\":\"4158.36\",\"5\":\"480.03\"},{\"1\":\"23060\",\"2\":\"Fort Wayne\",\"3\":\"4641.86\",\"4\":\"3608.99\",\"5\":\"1032.85\"},{\"1\":\"27500\",\"2\":\"Janesville\",\"3\":\"4649.54\",\"4\":\"3849.69\",\"5\":\"799.80\"},{\"1\":\"30860\",\"2\":\"Logan, UT\",\"3\":\"4650.36\",\"4\":\"4004.01\",\"5\":\"646.32\"},{\"1\":\"24020\",\"2\":\"Glens Falls\",\"3\":\"4651.79\",\"4\":\"4009.15\",\"5\":\"642.61\"},{\"1\":\"19980\",\"2\":\"Dodge City\",\"3\":\"4653.70\",\"4\":\"3071.69\",\"5\":\"1582.02\"},{\"1\":\"14010\",\"2\":\"Bloomington\",\"3\":\"4654.93\",\"4\":\"3581.74\",\"5\":\"1073.24\"},{\"1\":\"24340\",\"2\":\"Grand Rapids\",\"3\":\"4662.36\",\"4\":\"3865.58\",\"5\":\"796.76\"},{\"1\":\"33340\",\"2\":\"Milwaukee\",\"3\":\"4662.52\",\"4\":\"4057.60\",\"5\":\"604.88\"},{\"1\":\"43780\",\"2\":\"South Bend\",\"3\":\"4665.81\",\"4\":\"3762.41\",\"5\":\"903.41\"},{\"1\":\"25580\",\"2\":\"Hastings\",\"3\":\"4666.64\",\"4\":\"3548.11\",\"5\":\"1118.54\"},{\"1\":\"20780\",\"2\":\"Edwards\",\"3\":\"4670.06\",\"4\":\"4234.73\",\"5\":\"435.43\"},{\"1\":\"30420\",\"2\":\"Lexington\",\"3\":\"4671.57\",\"4\":\"3600.24\",\"5\":\"1071.36\"},{\"1\":\"27940\",\"2\":\"Juneau\",\"3\":\"4679.64\",\"4\":\"4634.87\",\"5\":\"44.76\"},{\"1\":\"46860\",\"2\":\"Vernal\",\"3\":\"4685.09\",\"4\":\"4038.56\",\"5\":\"646.59\"},{\"1\":\"13660\",\"2\":\"Big Rapids\",\"3\":\"4691.68\",\"4\":\"4171.00\",\"5\":\"520.70\"},{\"1\":\"12300\",\"2\":\"Augusta\",\"3\":\"4701.57\",\"4\":\"4227.76\",\"5\":\"473.80\"},{\"1\":\"32580\",\"2\":\"McAllen\",\"3\":\"4708.33\",\"4\":\"388.15\",\"5\":\"4320.18\"},{\"1\":\"28260\",\"2\":\"Kearney\",\"3\":\"4714.90\",\"4\":\"3640.09\",\"5\":\"1074.80\"},{\"1\":\"30700\",\"2\":\"Lincoln\",\"3\":\"4721.62\",\"4\":\"3504.78\",\"5\":\"1216.85\"},{\"1\":\"30100\",\"2\":\"Lebanon, NH\",\"3\":\"4723.72\",\"4\":\"4094.30\",\"5\":\"629.37\"},{\"1\":\"10860\",\"2\":\"Alice\",\"3\":\"4723.96\",\"4\":\"573.75\",\"5\":\"4150.19\"},{\"1\":\"26980\",\"2\":\"Iowa City\",\"3\":\"4724.68\",\"4\":\"3679.07\",\"5\":\"1045.61\"},{\"1\":\"27060\",\"2\":\"Ithaca\",\"3\":\"4735.90\",\"4\":\"4104.72\",\"5\":\"631.18\"},{\"1\":\"18100\",\"2\":\"Columbus\",\"3\":\"4740.79\",\"4\":\"3723.48\",\"5\":\"1017.32\"},{\"1\":\"11460\",\"2\":\"Ann Arbor\",\"3\":\"4743.77\",\"4\":\"3961.41\",\"5\":\"782.38\"},{\"1\":\"36900\",\"2\":\"Ottumwa\",\"3\":\"4758.51\",\"4\":\"3702.76\",\"5\":\"1055.75\"},{\"1\":\"30340\",\"2\":\"Lewiston\",\"3\":\"4760.85\",\"4\":\"4289.12\",\"5\":\"471.73\"},{\"1\":\"31540\",\"2\":\"Madison\",\"3\":\"4765.57\",\"4\":\"3996.16\",\"5\":\"769.38\"},{\"1\":\"46540\",\"2\":\"Utica\",\"3\":\"4768.30\",\"4\":\"4104.08\",\"5\":\"664.18\"},{\"1\":\"25200\",\"2\":\"Hailey\",\"3\":\"4773.70\",\"4\":\"4417.78\",\"5\":\"355.97\"},{\"1\":\"18180\",\"2\":\"Concord\",\"3\":\"4776.48\",\"4\":\"4006.65\",\"5\":\"769.83\"},{\"1\":\"48020\",\"2\":\"Watertown\",\"3\":\"4780.12\",\"4\":\"4079.31\",\"5\":\"700.79\"},{\"1\":\"40980\",\"2\":\"Saginaw\",\"3\":\"4780.33\",\"4\":\"4040.07\",\"5\":\"740.24\"},{\"1\":\"19340\",\"2\":\"Davenport\",\"3\":\"4785.74\",\"4\":\"3759.86\",\"5\":\"1025.88\"},{\"1\":\"22420\",\"2\":\"Flint\",\"3\":\"4786.11\",\"4\":\"3972.83\",\"5\":\"813.28\"},{\"1\":\"29700\",\"2\":\"Laredo\",\"3\":\"4789.20\",\"4\":\"505.35\",\"5\":\"4283.86\"},{\"1\":\"33540\",\"2\":\"Missoula\",\"3\":\"4796.63\",\"4\":\"4276.00\",\"5\":\"520.64\"},{\"1\":\"38460\",\"2\":\"Plattsburgh\",\"3\":\"4800.28\",\"4\":\"4248.91\",\"5\":\"551.36\"},{\"1\":\"38420\",\"2\":\"Platteville\",\"3\":\"4807.07\",\"4\":\"3853.78\",\"5\":\"953.29\"},{\"1\":\"41980\",\"2\":\"San Juan\",\"3\":\"4809.17\",\"4\":\"0.00\",\"5\":\"4809.17\"},{\"1\":\"17540\",\"2\":\"Clinton\",\"3\":\"4812.66\",\"4\":\"3978.55\",\"5\":\"834.07\"},{\"1\":\"15540\",\"2\":\"Burlington\",\"3\":\"4812.82\",\"4\":\"4094.31\",\"5\":\"718.52\"},{\"1\":\"18780\",\"2\":\"Craig\",\"3\":\"4819.10\",\"4\":\"4193.53\",\"5\":\"625.53\"},{\"1\":\"19780\",\"2\":\"Des Moines\",\"3\":\"4829.30\",\"4\":\"3758.94\",\"5\":\"1070.38\"},{\"1\":\"31820\",\"2\":\"Manitowoc\",\"3\":\"4834.66\",\"4\":\"4420.51\",\"5\":\"414.16\"},{\"1\":\"36540\",\"2\":\"Omaha\",\"3\":\"4834.82\",\"4\":\"3554.96\",\"5\":\"1279.88\"},{\"1\":\"13740\",\"2\":\"Billings\",\"3\":\"4837.73\",\"4\":\"4164.73\",\"5\":\"672.97\"},{\"1\":\"48060\",\"2\":\"Watertown\",\"3\":\"4840.20\",\"4\":\"4296.60\",\"5\":\"543.57\"},{\"1\":\"40180\",\"2\":\"Riverton\",\"3\":\"4845.06\",\"4\":\"4333.10\",\"5\":\"511.95\"},{\"1\":\"38540\",\"2\":\"Pocatello\",\"3\":\"4859.70\",\"4\":\"4260.76\",\"5\":\"598.96\"},{\"1\":\"12660\",\"2\":\"Baraboo\",\"3\":\"4860.17\",\"4\":\"4137.20\",\"5\":\"723.00\"},{\"1\":\"40420\",\"2\":\"Rockford\",\"3\":\"4861.81\",\"4\":\"3894.48\",\"5\":\"967.28\"},{\"1\":\"25740\",\"2\":\"Helena\",\"3\":\"4885.00\",\"4\":\"4351.40\",\"5\":\"533.62\"},{\"1\":\"46020\",\"2\":\"Truckee\",\"3\":\"4898.02\",\"4\":\"4602.12\",\"5\":\"295.97\"},{\"1\":\"36780\",\"2\":\"Oshkosh\",\"3\":\"4948.45\",\"4\":\"4327.13\",\"5\":\"621.34\"},{\"1\":\"24260\",\"2\":\"Grand Island\",\"3\":\"4958.04\",\"4\":\"3710.65\",\"5\":\"1247.39\"},{\"1\":\"29100\",\"2\":\"La Crosse\",\"3\":\"4958.41\",\"4\":\"4054.01\",\"5\":\"904.38\"},{\"1\":\"16940\",\"2\":\"Cheyenne\",\"3\":\"4962.64\",\"4\":\"4472.64\",\"5\":\"489.99\"},{\"1\":\"16300\",\"2\":\"Cedar Rapids\",\"3\":\"4967.24\",\"4\":\"4098.69\",\"5\":\"868.56\"},{\"1\":\"28060\",\"2\":\"Kalispell\",\"3\":\"4979.28\",\"4\":\"4561.83\",\"5\":\"417.42\"},{\"1\":\"12620\",\"2\":\"Bangor\",\"3\":\"4980.46\",\"4\":\"4566.55\",\"5\":\"413.90\"},{\"1\":\"11180\",\"2\":\"Ames\",\"3\":\"4983.68\",\"4\":\"4023.96\",\"5\":\"959.74\"},{\"1\":\"22700\",\"2\":\"Fort Dodge\",\"3\":\"4987.18\",\"4\":\"4096.40\",\"5\":\"890.75\"},{\"1\":\"42420\",\"2\":\"Scottsbluff\",\"3\":\"4987.99\",\"4\":\"4182.72\",\"5\":\"805.30\"},{\"1\":\"10660\",\"2\":\"Albert Lea\",\"3\":\"4993.15\",\"4\":\"4321.88\",\"5\":\"671.26\"},{\"1\":\"22060\",\"2\":\"Faribault\",\"3\":\"4999.21\",\"4\":\"4310.46\",\"5\":\"688.77\"},{\"1\":\"44460\",\"2\":\"Steamboat Springs\",\"3\":\"5007.72\",\"4\":\"4642.12\",\"5\":\"365.65\"},{\"1\":\"49460\",\"2\":\"Yankton\",\"3\":\"5016.55\",\"4\":\"4092.80\",\"5\":\"923.72\"},{\"1\":\"12740\",\"2\":\"Barre\",\"3\":\"5030.54\",\"4\":\"4602.37\",\"5\":\"428.21\"},{\"1\":\"35820\",\"2\":\"North Platte\",\"3\":\"5038.07\",\"4\":\"3881.86\",\"5\":\"1156.22\"},{\"1\":\"31940\",\"2\":\"Marinette, WI\",\"3\":\"5044.70\",\"4\":\"4639.22\",\"5\":\"405.52\"},{\"1\":\"35740\",\"2\":\"Norfolk\",\"3\":\"5059.65\",\"4\":\"4009.83\",\"5\":\"1049.84\"},{\"1\":\"36300\",\"2\":\"Ogdensburg\",\"3\":\"5068.10\",\"4\":\"4477.05\",\"5\":\"591.02\"},{\"1\":\"24580\",\"2\":\"Green Bay\",\"3\":\"5077.43\",\"4\":\"4517.10\",\"5\":\"560.31\"},{\"1\":\"15620\",\"2\":\"Cadillac\",\"3\":\"5086.00\",\"4\":\"4611.68\",\"5\":\"474.33\"},{\"1\":\"39860\",\"2\":\"Red Wing\",\"3\":\"5087.66\",\"4\":\"4383.48\",\"5\":\"704.16\"},{\"1\":\"32260\",\"2\":\"Marshalltown\",\"3\":\"5088.36\",\"4\":\"4188.86\",\"5\":\"899.53\"},{\"1\":\"43260\",\"2\":\"Sheridan\",\"3\":\"5090.12\",\"4\":\"4425.19\",\"5\":\"664.92\"},{\"1\":\"10980\",\"2\":\"Alpena\",\"3\":\"5091.63\",\"4\":\"4559.90\",\"5\":\"531.70\"},{\"1\":\"24060\",\"2\":\"Glenwood Springs\",\"3\":\"5097.44\",\"4\":\"4799.33\",\"5\":\"298.09\"},{\"1\":\"26820\",\"2\":\"Idaho Falls\",\"3\":\"5110.03\",\"4\":\"4582.05\",\"5\":\"527.96\"},{\"1\":\"20220\",\"2\":\"Dubuque\",\"3\":\"5124.50\",\"4\":\"4342.68\",\"5\":\"781.80\"},{\"1\":\"24500\",\"2\":\"Great Falls\",\"3\":\"5133.79\",\"4\":\"4697.10\",\"5\":\"436.72\"},{\"1\":\"42300\",\"2\":\"Sault Ste. Marie\",\"3\":\"5167.79\",\"4\":\"4880.28\",\"5\":\"287.50\"},{\"1\":\"21540\",\"2\":\"Escanaba\",\"3\":\"5169.48\",\"4\":\"4905.86\",\"5\":\"263.64\"},{\"1\":\"43580\",\"2\":\"Sioux City, IA\",\"3\":\"5199.12\",\"4\":\"4071.42\",\"5\":\"1127.72\"},{\"1\":\"33460\",\"2\":\"Minneapolis\",\"3\":\"5201.26\",\"4\":\"4496.06\",\"5\":\"705.17\"},{\"1\":\"31860\",\"2\":\"Mankato\",\"3\":\"5218.36\",\"4\":\"4521.90\",\"5\":\"696.41\"},{\"1\":\"20740\",\"2\":\"Eau Claire\",\"3\":\"5225.30\",\"4\":\"4567.70\",\"5\":\"657.58\"},{\"1\":\"47940\",\"2\":\"Waterloo\",\"3\":\"5237.92\",\"4\":\"4288.34\",\"5\":\"949.57\"},{\"1\":\"23940\",\"2\":\"Gillette\",\"3\":\"5249.16\",\"4\":\"4884.27\",\"5\":\"364.91\"},{\"1\":\"49220\",\"2\":\"Wisconsin Rapids\",\"3\":\"5251.96\",\"4\":\"4711.19\",\"5\":\"540.75\"},{\"1\":\"39660\",\"2\":\"Rapid City\",\"3\":\"5276.54\",\"4\":\"4522.11\",\"5\":\"754.43\"},{\"1\":\"48140\",\"2\":\"Wausau\",\"3\":\"5280.37\",\"4\":\"4853.25\",\"5\":\"427.14\"},{\"1\":\"33580\",\"2\":\"Mitchell\",\"3\":\"5324.94\",\"4\":\"4344.41\",\"5\":\"980.57\"},{\"1\":\"21860\",\"2\":\"Fairmont\",\"3\":\"5344.93\",\"4\":\"4627.27\",\"5\":\"717.65\"},{\"1\":\"40540\",\"2\":\"Rock Springs\",\"3\":\"5350.32\",\"4\":\"4953.96\",\"5\":\"396.35\"},{\"1\":\"16220\",\"2\":\"Casper\",\"3\":\"5378.11\",\"4\":\"4780.77\",\"5\":\"597.34\"},{\"1\":\"49380\",\"2\":\"Worthington\",\"3\":\"5384.38\",\"4\":\"4753.37\",\"5\":\"631.00\"},{\"1\":\"43620\",\"2\":\"Sioux Falls\",\"3\":\"5385.40\",\"4\":\"4599.85\",\"5\":\"785.58\"},{\"1\":\"27020\",\"2\":\"Iron Mountain, MI\",\"3\":\"5411.67\",\"4\":\"4933.90\",\"5\":\"477.75\"},{\"1\":\"32140\",\"2\":\"Marshall\",\"3\":\"5426.29\",\"4\":\"4697.63\",\"5\":\"728.65\"},{\"1\":\"43980\",\"2\":\"Spencer\",\"3\":\"5432.58\",\"4\":\"4564.94\",\"5\":\"867.63\"},{\"1\":\"31660\",\"2\":\"Malone\",\"3\":\"5434.92\",\"4\":\"5106.73\",\"5\":\"328.24\"},{\"1\":\"15580\",\"2\":\"Butte\",\"3\":\"5443.09\",\"4\":\"5146.83\",\"5\":\"296.29\"},{\"1\":\"14580\",\"2\":\"Bozeman\",\"3\":\"5466.69\",\"4\":\"5134.64\",\"5\":\"332.04\"},{\"1\":\"41060\",\"2\":\"St. Cloud\",\"3\":\"5474.23\",\"4\":\"4908.11\",\"5\":\"566.11\"},{\"1\":\"32380\",\"2\":\"Mason City\",\"3\":\"5481.34\",\"4\":\"4700.55\",\"5\":\"780.78\"},{\"1\":\"26340\",\"2\":\"Houghton\",\"3\":\"5554.72\",\"4\":\"5323.31\",\"5\":\"231.38\"},{\"1\":\"40340\",\"2\":\"Rochester\",\"3\":\"5574.23\",\"4\":\"4874.40\",\"5\":\"699.85\"},{\"1\":\"32100\",\"2\":\"Marquette\",\"3\":\"5577.92\",\"4\":\"5308.24\",\"5\":\"269.64\"},{\"1\":\"14660\",\"2\":\"Brainerd\",\"3\":\"5584.61\",\"4\":\"5142.92\",\"5\":\"441.68\"},{\"1\":\"26700\",\"2\":\"Huron\",\"3\":\"5635.72\",\"4\":\"4732.93\",\"5\":\"902.78\"},{\"1\":\"14500\",\"2\":\"Boulder\",\"3\":\"5689.63\",\"4\":\"5646.75\",\"5\":\"42.87\"},{\"1\":\"10820\",\"2\":\"Alexandria\",\"3\":\"5695.86\",\"4\":\"5118.40\",\"5\":\"577.43\"},{\"1\":\"24330\",\"2\":\"Grand Rapids\",\"3\":\"5750.95\",\"4\":\"5402.01\",\"5\":\"348.96\"},{\"1\":\"29660\",\"2\":\"Laramie\",\"3\":\"5756.72\",\"4\":\"5434.01\",\"5\":\"322.70\"},{\"1\":\"19860\",\"2\":\"Dickinson\",\"3\":\"5768.90\",\"4\":\"5215.70\",\"5\":\"553.19\"},{\"1\":\"47980\",\"2\":\"Watertown\",\"3\":\"5777.21\",\"4\":\"5153.78\",\"5\":\"623.45\"},{\"1\":\"22260\",\"2\":\"Fergus Falls\",\"3\":\"5788.18\",\"4\":\"5320.65\",\"5\":\"467.55\"},{\"1\":\"20260\",\"2\":\"Duluth, MN\",\"3\":\"5808.11\",\"4\":\"5518.41\",\"5\":\"289.70\"},{\"1\":\"47420\",\"2\":\"Wahpeton, ND\",\"3\":\"5821.92\",\"4\":\"5295.29\",\"5\":\"526.60\"},{\"1\":\"11260\",\"2\":\"Anchorage\",\"3\":\"5831.20\",\"4\":\"5787.30\",\"5\":\"43.90\"},{\"1\":\"13900\",\"2\":\"Bismarck\",\"3\":\"5864.38\",\"4\":\"5114.40\",\"5\":\"749.97\"},{\"1\":\"48780\",\"2\":\"Williston\",\"3\":\"5865.24\",\"4\":\"5200.54\",\"5\":\"664.71\"},{\"1\":\"10100\",\"2\":\"Aberdeen\",\"3\":\"5972.35\",\"4\":\"5149.07\",\"5\":\"823.26\"},{\"1\":\"13420\",\"2\":\"Bemidji\",\"3\":\"5988.61\",\"4\":\"5617.85\",\"5\":\"370.78\"},{\"1\":\"22020\",\"2\":\"Fargo, ND\",\"3\":\"6045.21\",\"4\":\"5343.69\",\"5\":\"701.48\"},{\"1\":\"27420\",\"2\":\"Jamestown\",\"3\":\"6087.12\",\"4\":\"5528.57\",\"5\":\"558.55\"},{\"1\":\"27220\",\"2\":\"Jackson, WY\",\"3\":\"6120.04\",\"4\":\"5953.07\",\"5\":\"167.01\"},{\"1\":\"33500\",\"2\":\"Minot\",\"3\":\"6130.12\",\"4\":\"5580.11\",\"5\":\"550.00\"},{\"1\":\"24220\",\"2\":\"Grand Forks, ND\",\"3\":\"6184.47\",\"4\":\"5648.96\",\"5\":\"535.48\"},{\"1\":\"13620\",\"2\":\"Berlin\",\"3\":\"6435.94\",\"4\":\"6299.84\",\"5\":\"136.09\"},{\"1\":\"21820\",\"2\":\"Fairbanks\",\"3\":\"7222.49\",\"4\":\"7092.03\",\"5\":\"130.45\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nThe way these figures are represented spatially can be visualized as follows:\n\n\n\nNotes\nInitial tweet shortly after I came up with the calculation idea following looking at weather data and solving integral equations:\n\nThat calculus class finally comes in handy. Figuring out a better way to measure a day’s pleasant air temperature through integration. Pretty excited about this one. pic.twitter.com/EIrXdBrHxV— Taras Kaduk (@taraskaduk) May 2, 2019\n\n\nR code for EDD\nHere is the R function to obtain the area between the temperature curve and the baseline. This function can be used in a data frame (adhering to the tidy data analysis framework) and applied with a purrr::map2_dbl() call inside a mutate() call.\n\n\nrequire(tibble)\n\nget_edd <- function(min, max, baseline = 18) {\n  \n  # First, create the temp. function:\n  a <- (max-min)/2 #amplitude\n  period <- 24\n  b <- 2 * pi / period\n  d <- min + a\n  \n  # This is our temperature function:\n  temperature <- function(x) {\n    -a * cos(b * x) + d\n  }\n  \n  \n  # 3 calculations based on the 3 scenarios\n  # of how the curve and the baseline interact\n  \n  if (min >= baseline) {\n    # integral <- -a*sin(24*b) + 24*d - 24*baseline\n    integral <- integrate(temperature, 0, 24)$value - baseline * 24 %>% \n      round(2)\n    edd <- tibble( edd_hot = round(integral/24,2),  \n                   edd_cold = 0, \n                   edd_total = round(integral/24,2))\n    \n  } else if (max <= baseline) {\n    integral <- baseline * 24 - integrate(temperature, 0, 24)$value %>% \n      round(2)\n    \n    edd <- tibble( edd_hot = 0,  \n                   edd_cold = round(integral/24,2), \n                   edd_total = round(integral/24,2))\n    \n  } else {\n    intercept1 <- acos((d - baseline) / a) / b\n    intercept2 <- (12 - intercept1) * 2 + intercept1\n    \n    integral1 <-\n      baseline * intercept1 - integrate(temperature, 0, intercept1)$value\n    \n    integral2 <-\n      integrate(temperature, intercept1, intercept2)$value - baseline * (intercept2 - intercept1) \n    \n    integral3 <-\n      baseline * (24 - intercept2) - integrate(temperature, intercept2, 24)$value \n    \n    edd <- tibble(edd_hot = round(integral2/24,2),  \n                   edd_cold = round((integral1 + integral3)/24,2), \n                   edd_total = round((integral1 + integral2 + integral3)/24,2))\n  }\n  return(edd)\n}\n\n\n\n\n\n\nChow, D. H. C., and Geoff J. Levermore. 2007. “New Algorithm for Generating Hourly Temperature Values Using Daily Maximum, Minimum and Average Values from Climate Models.” Building Services Engineering Research and Technology 28 (3): 237–48. https://doi.org/10.1177/0143624407078642.\n\n\nClimate Impact Lab. 2018. “Estimating the Frequency of 90 Degree Days.” https://www.impactlab.org/wp-content/uploads/2018/08/CIL_Days-over-90_Method.pdf.\n\n\nLin, Qiaoxuan, Hualiang Lin, Tao Liu, Ziqiang Lin, Wayne R. Lawrence, Weilin Zeng, Jianpeng Xiao, et al. 2019. “The Effects of Excess Degree-Hours on Mortality in Guangzhou, China.” Environmental Research 176 (September): 108510. https://doi.org/10.1016/j.envres.2019.05.041.\n\n\nLivingston, Ian. 2020. “Washington Breaks Record for Most 90-Degree Days in a Month.” Washington Post, July. https://www.washingtonpost.com/weather/2020/07/27/washington-dc-july-record-heat/.\n\n\nMegyesi, M. S., S. P. Nawrocki, and N. H. Haskell. 2005. “Using Accumulated Degree-Days to Estimate the Postmortem Interval from Decomposed Human Remains.” Journal of Forensic Science 50 (3): 1–9. https://doi.org/10.1520/JFS2004017.\n\n\nPlumer, Brad, and Nadja Popovich. 2017. “95-Degree Days: How Extreme Heat Could Spread Across the World.” The New York Times, June. https://www.nytimes.com/interactive/2017/06/22/climate/95-degree-day-maps.html, https://www.nytimes.com/interactive/2017/06/22/climate/95-degree-day-maps.html.\n\n\nThom, H. C. S. 1952. “Seasonal Degree-Day Statistics for the United States.” Monthly Weather Review 80 (9): 143–47. https://doi.org/10.1175/1520-0493(1952)080<0143:SDSFTU>2.0.CO;2.\n\n\nZalom, FG, PB Goodell, LT Wilson, WW Barnett, and Bentley, WJ. 1983. “Degree Days: The Calculation and Use of Heat Units in Pest Management. University of California. Division of Agriculture and Natural Resources Leaflet.” University of California Division of Agriculture and Natural Resources Leaflet 21373.\n\n\nI was not aware of such computations until after writing out the logic of it. I came up with the idea independently while looking into weather patterns across U.S. cities, while simultaneously auditing a Calc III class for a refresher. My understanding is that it is best practice to cite similar research even if it was not used in researching or writing the paper.↩︎\nThis assumption only requires 2 data inputs (min and max daily temperature) instead of continuous temperature reading.↩︎\nThis assumption helps us in modeling the curve without any additional inputs, while a more precise approach would require sunrise, sunset, and solar noon times for each day (Chow and Levermore 2007)↩︎\nhttps://taraskaduk.com/2019/02/18/weather/ for the write-up of the methodology, and https://github.com/taraskaduk/place-to-live for the data and the R code to obtain the data↩︎\n",
    "preview": "posts/2019-11-11-excess-degree-days/integral.png",
    "last_modified": "2021-01-10T12:26:57-05:00",
    "input_file": {},
    "preview_width": 3324,
    "preview_height": 2670
  },
  {
    "path": "posts/2019-10-23-is-rock-dying/",
    "title": "Is Rock Dying?",
    "description": "A quantitative comparison of artists in the Billboard 200 charts 1963 - 2018. A comparison of rock and hip-hop artists show a decline of the former and the rise of the latter",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2019-10-23",
    "categories": [],
    "contents": "\nI’ve been a huge rock and metal fan my whole life. Most of the music that I listen to are some derivatives of rock, but mostly of a subcultural kind. I’ve been logging my listening habits for over 11 years, so in case you are curious on the validity of my claims or the details of my tastes, you can check out this post right here.\nAnyway, I’ve been noticing a trend in my habits for the last few years: it seemed to me that I stopped discovering new artists and pretty much listen to the same old bands. At first, I thought it’s all me to blame and I just get old. But then Finn McKenty, a guy that does reviews of subcultural music genres and various music bands on his YouTube channel “The Punk Rock MBA” (which I stan a lot), released this video titled “3 Reasons Why Rock is Dying”, and it kind of made a lot of sense to me:\n\n\nRegardless of the reasons Finn thinks rock is dying, it was a new thought for me - an idea that it’s not that I only listen to the old bands, but that there aren’t any new good bands to begin with. In his video, Finn cites Billboard charts as one of the data sources. In fact, he kicks it off with a phrase “Let’s look at the data”, which is totally a call to action for me. I decided to take it up and investigate it properly: not by glancing over charts, but by getting the data and analazyng it.\nI followed one of Finn’s hunches looked at the Billboard 200 charts and payed attention to two specific metrics: how often does rock music appear in the charts, and what is the age of the artists.1 To put the results in context, but keep it simple, I compared the data on rock with the same data on hip-hop - a music genre that we see rising more and more recently. Any other comnparisons didn’t seem especially meaningful or interesting, and so I kept it to “Rock VS Hip-Hop” exclusively.\nResults\n\n\n\nOne thing immediatelly jumps out: rock’s relevance in the mass market is really declining, while hip-hop is definitely on the rise. It is clear just from a sheer number of albums making it to the Billboard 200 (chart above). The picture is the same, no matter how differently we look at the data.\nHere is another chart, this time only looking at distinct count of artist by year (i.e. we are not counting every appearance of an album in every weekly chart, just any appearance of an artist in any given year at least once):\n\nSo, this part is clear. What about age though? Are the remaining artists that we see, are they getting older? Well, this one was not as easy to answer. The data that I have allows me to compute a real age of individual artists and a stage age of music groups.2 It would be more helpful to have start of career for both single artists and groups. But the best we can do with this data is to look at individual artists and groups separately3:\n\nWhat we see is that both rock persons and groups are aging, and so are the hip-hop groups,4 while individual hip-hop artists’ age seems to be flatlining and perhaps even reversing.\nConclusion\nSo there we have it. Indeed, there are fewer and fewer rock artists making it to the Billboard 200, and the ones that do aren’t exactly fresh blood. Of course, many subcultural genres I listen to never make it to charts like this to begin with, but the trend is visible even on the fringe.\nIt kind of bums me out a bit, as I wonder what will the new generations of young kids listen to. Hardcore punk, punk rock and metal music played a crucial role in my life, especially in my teenage years. It helped me channel my anger, my rebellious attitudes, helped me shape my goals, helped me grow. Pop music and hip-hop doesn’t do that for me. And I know I’ve always been on the fringe in my music tastes, and we hardcore kids are a niche of a niche and a very small minority, but I still wonder what music will be there for the new kids to rebel to? God, I hope not the same old bands I love and admire.\nMethodology\nI pulled the weekly Top 200 albums from 1963 through 2018 from https://components.one/datasets/billboard-200/. The data set is attributed to Andrew Thompson ([@asthompson](https://twitter.com/asthompson) on Twitter).\nHaving the weekly 200 most popular albums, I was still missing the genres of the artists and the age. I got the start date for artists via MusicBrainz API. The API also provided the genre data, but it appeared to be missing many new artists, and giving me wrong genres on some. I then resorted to the last.fm API, which has the crowd-sourced data for artists’ genres.\nFor each artist, I pulled the top 5 tags attributed to them, which is supposed to solve the difficulty in the genres taxonomy: most flavors of rock music will contain a “rock” tag in their top 5 tags most of the time, and same goes for other genres. (It does suggest that the same artist can be counted in more categories than one if we happen to compare data between genres. But this is not necessarily a bug, but a feature)\nThe R files and the data are over at https://github.com/taraskaduk/is-rock-dead (Sorry for the mess and no comments in the code, hope you can make sense of it)\nThe discussion of whether or not rock and metal music, especially the niche subcultures at the extremes should even be concerned with making it to the Billboard 200 is beyond the scope of this analysis. Finn provides some thoughts on this in his video, BTW↩︎\nThe issue was with the MusicBrainz API response on a start date of an artist: it provides a birth date for a person and a group start date for groups. I guess I could figure it out by getting every album release for every artist, and then figure out the earliest release date for each, but this is a task for too many API calls which I’m not comfotable with.↩︎\nI chose median age over mean age due to the fact that there is no upper bound on the data, and if an Elvis Prestley record made it to the chart today, we’d have to compute his age as of this year as 84 years old, as he’d be 84 years old when he became relevant again in Billboard 200↩︎\nalthough there aren’t many hip-hop groups making the Billboard 200 to begin with, which explains the high variability. Most hip-hop acts are individual performers, while most rock acts are music bands↩︎\n",
    "preview": "posts/2019-10-23-is-rock-dying/1.png",
    "last_modified": "2021-01-09T21:05:43-05:00",
    "input_file": {},
    "preview_width": 2483,
    "preview_height": 2391
  },
  {
    "path": "posts/2019-03-23-apple-health/",
    "title": "Analyze and visualize your iPhone's Health app data in R",
    "description": "Learn to import, analyze and visualize your Health app data in R",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2019-03-23",
    "categories": [],
    "contents": "\nIntroduction\nI am convinced that many data scientists and data analysts acquire a peculiar reflex. Any time they suspect (consciously or subconsciously) that somewhere data is being collected, they develop an irresistible itch to analyze that data, oftentimes not even knowing where the data is!\n\nAfter purchasing my first iPhone, I quickly realized that its Health app is capable of storing lots of data points. I looked at and analyzed some weight and steps data from my Android phone in the past, but this seemed like a whole new level.\nI Googled around and found this post from ryanpraski. The code was reproducible enough, and I ran it on my side, made a few changes and kind of left it.\nFast forward about 2 years, I got an Apple Watch, and got a lot more data points into my Health app. I also got a bit more serious about my workouts and my wellness, and started to rely on Health app data a lot. At one point, I even built out a small patchwork dashboard that helped me during my “bulking” and “cutting” phases: I tracked my weight, basal and active energy, calorie intake, daily amount of protein intake etc.\nLong story short, I accumulated enough charts and ideas to put into a blog post and share them all with the world. And so, without further ado…\nGet the data\nGetting the data out of Health app is pretty easy. From Apple Health, you can export it anywhere. I save it right away into the Files, which instantly appears in my iCloud and is accessible from my Mac.\n\nYour mileage may vary based on the path you chose to get the files. You could save it on the cloud, and then access via a web link, for instance. I find the iCloud storage synced up to your Mac being the most convenient solution. Another thing you can do is to use a Shortcut to get the Health data in a different way. For example, there is this shortcut here, but you can write your own.\nAnyway, back to our zip export. Now that the zip archive is on my Mac, you can break out an R session and start prodding.\nImport\nBefore I forget, a few packages you’ll need to replicate the analysis/charts are:\n\nlibrary(XML)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(ggthemes)\nThe path to a folder on iCloud when synced up with the cloud looks funny. You’re better off creating an RStudio project and landing your archive right in that folder. But just FYI, if you sync your Documents folder to iCloud and later want to reach the local files, the path would look like this:\n\npath <- '~/Library/Mobile\\ Documents/com~apple~CloudDocs/Documents'\nAnyhow, get that zip archive and unzip it\n\nzip <- paste(path, 'export.zip', sep = '/')\nunzip(zip, exdir = path)\nSys.sleep(3) # pause for 3 seconds to let your computer unzip it.\nNow that we unzipped the archive, we can work with the actual data. BTW, the contents of your unzipped folder will look something like this:\n\n> list.files(paste0(path,'/apple_health_export'))\n[1] \"clinical-records\"   \"electrocardiograms\" \"export_cda.xml\"     \"export.xml\"\nexport.xml is the data we’ll be using primarily\nI’m not entirely clear on what export_cda.xml is: it seems to contain the data similar to export.xml, but I haven’t had much luck completely parsing it. I understand CDA stands for Clinical Document Architecture and is a special format to exchange these kinds of data.\nelectrocardiograms is a folder where your Apple Watch ⌚️ ECGs are stored in csv format\nclinical-records is where external clinical results land (if you connected a clinic to your Apple Health did some lab work)\nBut we’ll focus solely on export.xml file\nFirst create an xml object containing all of the data as a starting point\n\nxml <- xmlParse(paste0(path, '/apple_health_export/export.xml'))\nsummary(xml)\nYour mileage may vary based on the amount of data you store in Apple Health, and the amount of Apple devices that use Apple Health (iPhone alone or iPhone + Apple Watch⌚). A brief rundown is the following:\nRecord is the main place where the data is stored. Weight, height, blood pressure, steps, nutrition data, heart rate - all stored here\nActivitySummary is your Apple Watch daily Activity stats: Move, Exercise, Stand data\nWorkout is your Apple Watch workout activity per workout logged\nLocation is your location logged during your Apple Watch workouts (useful for runs/hikes)\nInstantaneousBeatsPerMinute is exactly that: instantaneous heart rate when measured by AppleWatch\nExportDate is useful to validate what data are you looking at.\nThe rest is either some matadata or something that I haven’t found much use for (yet) You can get the data into a clean nice data frame from each attribute with a simple function here:\n\ndf_record <-   XML:::xmlAttrsToDataFrame(xml[\"//Record\"])\ndf_activity <- XML:::xmlAttrsToDataFrame(xml[\"//ActivitySummary\"])\ndf_workout <-  XML:::xmlAttrsToDataFrame(xml[\"//Workout\"])\ndf_clinical <- XML:::xmlAttrsToDataFrame(xml[\"//ClinicalRecord\"])\ndf_location <- XML:::xmlAttrsToDataFrame(xml[\"//Location\"]) %>% \n  mutate(latitude = as.numeric(as.character(latitude)),\n         longitude = as.numeric(as.character(longitude)))\nHere are the str() calls to these data frames:\nRecord\n\n'data.frame':   527744 obs. of  9 variables:\n $ type         : Factor w/ 34 levels \"HKQuantityTypeIdentifierActiveEnergyBurned\",..: 4 4 28 7 7 7 7 7 7 7 ...\n $ sourceName   : Factor w/ 8 levels \"Health\",\"MyFitnessPal\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ sourceVersion: Factor w/ 40 levels \"1\",\"10.2.1\",\"10.3.1\",..: 8 21 2 3 3 3 3 3 3 3 ...\n $ unit         : Factor w/ 14 levels \"count\",\"count/min\",..: 8 8 3 6 6 6 6 6 6 6 ...\n $ creationDate : Factor w/ 190384 levels \"2017-03-25 18:51:22 -0400\",..: 3313 23291 54 226 239 256 275 342 356 382 ...\n $ startDate    : Factor w/ 340829 levels \"2017-03-25 18:39:37 -0400\",..: 9329 31933 159 634 672 711 768 967 999 1057 ...\n $ endDate      : Factor w/ 341207 levels \"2017-03-25 18:46:21 -0400\",..: 9326 31926 159 634 671 711 768 967 999 1057 ...\n $ value        : Factor w/ 77589 levels \"0\",\"0.000102795\",..: 77165 77109 76024 65909 65912 65908 65563 65918 65918 65910 ...\n $ device       : Factor w/ 96622 levels \"<<HKDevice: 0x282d00000>, name:Apple Watch, manufacturer:Apple, model:Watch, hardware:Watch4,1, software:5.0.1>\",..: NA NA NA NA NA NA NA NA NA NA ...\nActivity\n\n'data.frame':   130 obs. of  8 variables:\n $ dateComponents        : Factor w/ 130 levels \"2018-11-04\",\"2018-11-05\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ activeEnergyBurned    : Factor w/ 128 levels \"0\",\"1017.62\",..: 1 1 1 48 19 96 99 30 110 31 ...\n $ activeEnergyBurnedGoal: Factor w/ 4 levels \"0\",\"760\",\"770\",..: 1 1 1 2 2 2 2 2 2 2 ...\n $ activeEnergyBurnedUnit: Factor w/ 1 level \"kcal\": 1 1 1 1 1 1 1 1 1 1 ...\n $ appleExerciseTime     : Factor w/ 75 levels \"0\",\"1\",\"10\",\"102\",..: 1 1 1 22 73 44 40 7 38 4 ...\n $ appleExerciseTimeGoal : Factor w/ 1 level \"30\": 1 1 1 1 1 1 1 1 1 1 ...\n $ appleStandHours       : Factor w/ 12 levels \"0\",\"10\",\"11\",..: 1 1 1 3 8 7 8 7 6 7 ...\n $ appleStandHoursGoal   : Factor w/ 1 level \"12\": 1 1 1 1 1 1 1 1 1 1 ...\nWorkout\n\n'data.frame':   146 obs. of  13 variables:\n $ workoutActivityType  : Factor w/ 8 levels \"HKWorkoutActivityTypeHiking\",..: 8 8 2 8 8 8 8 8 7 8 ...\n $ duration             : Factor w/ 146 levels \"1.413170067469279\",..: 50 54 99 32 4 35 66 59 116 67 ...\n $ durationUnit         : Factor w/ 1 level \"min\": 1 1 1 1 1 1 1 1 1 1 ...\n $ totalDistance        : Factor w/ 80 levels \"0\",\"0.1136363666704027\",..: 57 63 1 47 6 14 61 66 1 7 ...\n $ totalDistanceUnit    : Factor w/ 1 level \"mi\": 1 1 1 1 1 1 1 1 1 1 ...\n $ totalEnergyBurned    : Factor w/ 146 levels \"10.9099860589808\",..: 101 141 42 74 64 65 4 8 78 131 ...\n $ totalEnergyBurnedUnit: Factor w/ 1 level \"kcal\": 1 1 1 1 1 1 1 1 1 1 ...\n $ sourceName           : Factor w/ 2 levels \"StrongLifts\",..: 2 2 2 2 2 2 2 2 2 2 ...\n $ sourceVersion        : Factor w/ 5 levels \"1\",\"5.0.1\",\"5.1.1\",..: 2 2 2 2 2 2 2 2 2 3 ...\n $ device               : Factor w/ 140 levels \"<<HKDevice: 0x282d440a0>, name:Apple Watch, manufacturer:Apple, model:Watch, hardware:Watch4,1, software:5.1.1>\"\n $ creationDate         : Factor w/ 146 levels \"2018-11-13 09:19:23 -0400\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ startDate            : Factor w/ 146 levels \"2018-11-13 09:04:43 -0400\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ endDate              : Factor w/ 146 levels \"2018-11-13 09:19:23 -0400\",..: 1 2 3 4 5 6 7 8 9 10 ...\nClinical\n\ndata.frame':    17 obs. of  7 variables:\n $ type            : Factor w/ 3 levels \"DiagnosticReport\",..: 3 1 1 1 1 1 1 1 1 2 ...\n $ identifier      : Factor w/ 17 levels \"bqRS...dsJBAkJw\",..: 5 16 13 4 17 2 7 12 6 11 ...\n $ sourceName      : Factor w/ 1 level \"Quest Diagnostics\"\n $ sourceURL       : Factor w/ 17 levels \"https://api.questdiagnostics.com/resource-server/fhir/DiagnosticRepor\",..: \n $ fhirVersion     : Factor w/ 1 level \"1.0.2\": 1 1 1 1 1 1 1 1 1 1 ...\n $ receivedDate    : Factor w/ 2 levels \"2018-12-09 11:50:24 -0400\",..: 1 2 2 2 2 2 2 2 2 2 ...\n $ resourceFilePath: Factor w/ 17 levels \"/clinical-records/Dia...tiReport-3...2709.json\",..: 17 4 5 3 6 2 1 8 7 14 ...\nLocation\n\n'data.frame':   58017 obs. of  8 variables:\n $ date              : Factor w/ 57899 levels \"2018-11-13 09:14:50 -0400\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ latitude          : num  30.3 30.3 30.3 30.3 30.3 ...\n $ longitude         : num  -81.7 -81.7 -81.7 -81.7 -81.7 ...\n $ altitude          : Factor w/ 47107 levels \"-0.0223591\",\"-0.0238451\",..: 39102 38801 38480 38045 37539 36906 36167 35364 34635 33990 ...\n $ horizontalAccuracy: Factor w/ 32278 levels \"0.785208\",\"0.785209\",..: 18259 17319 16544 14808 11859 10555 9507 8498 7891 7884 ...\n $ verticalAccuracy  : Factor w/ 32170 levels \"0.637318\",\"0.637338\",..: 23883 21283 18904 17946 16896 12473 10202 8930 7976 7775 ...\n $ course            : Factor w/ 29914 levels \"-1\",\"0.000919214\",..: 27796 27598 27534 29183 27827 27505 26221 27761 27833 27836 ...\n $ speed             : Factor w/ 47316 levels \"-1\",\"0\",\"0.000127598\",..: 21577 21574 21551 21446 21229 20885 20389 19726 18890 17951 ...\nWell, this is pretty much it. From here, you can let you imagination run wild. The stuff you’ll be able to do will depend on how much data you store in Apple Health and what’s the use case you have.\nBelow, I’ll just provide a few brief examples of what I did with the data (erasing numeric or other identifying values where necessary).\nExamples\nRecord data frame\n\n df <- df_record %>%\n  mutate(device = gsub(\".*(name:)|,.*\", \"\",device),\n         value = as.numeric(as.character(value)),\n         endDate = ymd_hms(endDate,tz=\"America/New_York\"),\n         date = date(endDate),\n         year = year(endDate),\n         month = month(endDate),\n         day = day(endDate),\n         yday = yday(endDate),\n         wday = wday(endDate),\n         hour = hour(endDate),\n         minute = minute(endDate),\n         type = str_remove(type, \"HKQuantityTypeIdentifier\")\n         )\nSee what kind of data is stored:\n\ndf %>% select(type) %>% distinct()\n\n                        type\n1               BloodGlucose\n2                     Height\n3                   BodyMass\n4                  HeartRate\n5      BloodPressureSystolic\n6     BloodPressureDiastolic\n7            RespiratoryRate\n8                  StepCount\n9     DistanceWalkingRunning\n10         BasalEnergyBurned\n11        ActiveEnergyBurned\n12            FlightsClimbed\n13           DietaryFatTotal\n14 DietaryFatPolyunsaturated\n15 DietaryFatMonounsaturated\n16       DietaryFatSaturated\n17        DietaryCholesterol\n18             DietarySodium\n19      DietaryCarbohydrates\n20              DietaryFiber\n21              DietarySugar\n22     DietaryEnergyConsumed\n23            DietaryProtein\n24           DietaryVitaminC\n25            DietaryCalcium\n26               DietaryIron\n27          DietaryPotassium\n28         AppleExerciseTime\n29          DistanceSwimming\n30       SwimmingStrokeCount\n31          RestingHeartRate\n32                    VO2Max\n33   WalkingHeartRateAverage\n34  HeartRateVariabilitySDNN\nWeight data\nFirst of all, if you use iPhone, there is no Earthly reason for you to log your weight in Google Forms or some other spreadsheet. Putting the number into Health is super easy, and I like storing things in one place (versus a bunch of orphan spreadsheets). And with the acquisition of Workflow and the renaming it into Shortcuts, it’s even easier:\n\nI’ve been tracking my daily weight since my Android times, and tried many approaches. Apple Health + Shortcuts is by far the most efficient and reliable.\n(And yes, you can get or write other Shortcuts to enter other data besides your weight into the Health app)\nAnyway, here are a few ways to visualize your data. A vanilla weight chart, for example:\n\ndf %>%\n  arrange(endDate) %>% \n  filter(type == 'BodyMass') %>% \n  # Had to reduce sourceName to these 2 sources to avoid double-counting\n  # by other apps that use BodyMass and then store it back into Health\n  filter(sourceName %in% c(\"Health\", \"Shortcuts\")) %>% \n  \n  ggplot(aes(x= date, y = value)) +\n    geom_point(alpha = 0.3) +\n    geom_smooth(span = 0.2, col = \"grey30\", se = FALSE) +\n    labs(title = \"Apple Health Weight Chart Sample\",\n         caption = \"@taraskaduk | taraskaduk.com\") +\n    theme(axis.text.y = element_blank()) # you shouldn't see these, lol\n\nWith a few additional calls to geom_vline() and geom_line() you can supercharge this chart and make it a part of a goal-tracking dashboard:\n\nMore daily grain data\nThere many more charts you can build from this grain: your resting heart rate, walking heart rate, VO2Max, and anything else that can be summarized to a daily level. \nHourly grain\nSome data is fun to see on an hourly grain. For example, step count and heart rate, when summarized to an hourly level, shows some cool stuff:\n\ndf %>%\n  filter(type %in% c('HeartRate', 'StepCount')) %>% \n  group_by(type, hour) %>% \n  summarise(value = mean(value)) %>% \n  ggplot(aes(x = hour, y = value, fill = value)) +\n  geom_col() +\n  scale_fill_continuous(low = 'grey70', high = \"#008FD5\") +\n  scale_x_continuous(\n    breaks = c(0, 6, 12, 18),\n    label = c(\"Midnight\", \"6 AM\", \"Midday\", \"6 PM\")\n  ) +\n  labs(title = \"Apple Health Data\",\n       subtitle = \"Hourly Data Sample\",\n       caption = '@taraskaduk | taraskaduk.com') +\n  facet_wrap(~ type)+\n  guides(fill=FALSE)\n\nAs these two charts nicely reveal, I have a sedentary job, I walk to work and from work, and walk around during my break, I work out after work (hence a slightly higher step count around 6 PM + higher heart rate). Or, if we further break down the step count by day of the week, it will reveal that on weekend, I move a bit all the time, versus more concentrated activity on weekdays:\n\ndf %>%\n  filter(type == 'StepCount') %>% \n  group_by(date,wday,hour) %>% \n  summarize(steps=sum(value)) %>% \n  group_by(hour,wday) %>% \n  summarize(steps=sum(steps)) %>% \n  arrange(desc(steps)) %>%\n\n  ggplot(aes(x=hour, y=wday,  fill=steps)) + \n    geom_tile(col = 'grey40') + \n    scale_fill_continuous(labels = scales::comma, low = 'grey95', high = '#008FD5') +\n    theme(panel.grid.major = element_blank()) +\n    scale_x_continuous(\n      breaks = c(0, 6, 12, 18),\n      label = c(\"Midnight\", \"6 AM\", \"Midday\", \"6 PM\")\n    ) +\n    scale_y_reverse(\n      breaks = c(1,2,3,4,5,6,7),\n      label = c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\n    ) +\n    labs(title = \"Weekly Step Count Heatmap\",\n         caption = '@taraskaduk | taraskaduk.com') +\n    guides(fill=FALSE)+\n    coord_equal()\n\nSame can be done with a “days X months” grid, or anything else - you name it.\nCalorie deficit and surplus\nIf you’re tracking your meals in an app like MyFitnessPal, as well as having an Apple Watch, you can figure out your caloric surplus or deficit based on the data from your nutrition and your Apple Watch’s basal and active energy readings. The next chart goes a little something like this:\n\nenergy <- df %>%\n  filter(endDate >= '2018/11/24' & \n           date < '2018/12/30' & \n           type %in% c('BasalEnergyBurned', 'ActiveEnergyBurned', 'DietaryEnergyConsumed')) %>%\n  select(date, type, value) %>% \n  group_by(date, type) %>% \n  summarise(value = sum(value)) %>% \n  ungroup()\n\nggplot() +\n  geom_col(data = energy %>% \n             filter(type != \"DietaryEnergyConsumed\"),\n             aes(x= date, y = value, fill = type)) +\n  scale_fill_manual(values = c(\"BasalEnergyBurned\" = \"#3182bd\", \n                               \"ActiveEnergyBurned\" = \"#9ecae1\", \n                               \"DietaryEnergyConsumed\" = \"grey30\")) +\n  geom_col(data = energy %>% \n             filter(type == \"DietaryEnergyConsumed\"), \n             aes(x= date, y = value, fill = type),  width = 0.7, alpha = 0.6) +\n  labs(title = \"Calories Consumed & Burned\",\n       caption = '@taraskaduk | taraskaduk.com')\n\nggsave('energy1.png', width = 8, height = 6, units = \"in\")\n\nYou can also calculate given deficit/surplus by a bit of data wrangling:\n\nenergy_spread <- energy %>% \n  spread(type, value) %>% \n  mutate(EnergyBurned = ActiveEnergyBurned + BasalEnergyBurned,\n         EnergyConsumed = DietaryEnergyConsumed,\n         EnergyDeficit = EnergyBurned - EnergyConsumed,\n         EnergyDeficitPct = EnergyDeficit / EnergyBurned,\n         EnergyDeficitCat = if_else(EnergyDeficit > 0, 'Deficit', 'Surplus'))\n\nenergy_spread %>% \n  ggplot(aes(x= date, y = EnergyDeficitPct, fill = EnergyDeficitCat)) +\n  geom_col() +\n  scale_fill_manual(values = c(\"#1a9641\", \"#ca0020\"))+\n  labs(title = \"Calorie deficit and surplus\",\n       caption = '@taraskaduk | taraskaduk.com')\n(oh, hey, look, I overate a lot on Christmas!)\n\n\n\nOther dietary data\nSpeaking of nutrition data, you can track many various macros and micros directly from Apple Health if your nutrition tracking app is connected to it.\n\ndf %>%\n  filter(type %in% c('DietaryFatSaturated', 'DietaryProtein', 'DietaryCholesterol', 'DietaryPotassium')) %>% \n  mutate(type = str_remove(type, \"Dietary\")) %>% \n  group_by(type, date) %>% \n  summarise(value = sum(value)) %>% \n  \n  ggplot(aes(x= date, y = value)) +\n    geom_smooth(span = 0.7, alpha = 0.2, col = \"grey30\", se = FALSE) +\n    geom_point(alpha = 0.5) +\n    facet_wrap(~type, scales=\"free\") +\n    labs(title = \"Nutrition Micros and Macros to Track\",\n         caption = '@taraskaduk | taraskaduk.com')\n\nFor example, you could plot your protein intake against your body weight and then visualize the percentage, if you’re working out and need to ensure a specific amount of protein intake every day.\nOther external data: blood pressure\nYou can get many other things out of Apple Health data dump. For example, I use an OMRON blood pressure monitor, and it syncs the data to my Apple Health (or, I could enter the readings manually upon my health checkups if I didn’t have a monitor at home). I later can extract this BP data and visualize it:\n\nblood_pressure <- df %>%\n  filter(type %in% c('BloodPressureSystolic', \"BloodPressureDiastolic\")) %>% \n  mutate(type = str_remove(type, \"BloodPressure\")) %>% \n  select(value, type, date:hour) %>% \n  group_by_at(vars(-value)) %>% \n  summarise(value = mean(value)) %>% \n  mutate(morning = if_else(hour >=5 & hour <= 8, TRUE, FALSE),\n         stage = factor(if_else(type == \"Systolic\",\n                              case_when(value <  xxx ~ \"Normal\",\n                                        value <  xxx ~ \"Elevated\",\n                                        value <  xxx ~ \"Hypertension 1\",\n                                        value <  xxx ~ \"Hypertension 2\",\n                                        value >= xxx ~ \"Hypertensive Crisis\",\n                                        TRUE ~ NA_character_),\n                              case_when(value <  xxx ~ \"Normal\",\n                                        value <  xxx ~ \"Elevated\",\n                                        value <  xxx ~ \"Hypertension 1\",\n                                        value <  xxx ~ \"Hypertension 2\",\n                                        value >= xxx ~ \"Hypertensive Crisis\",\n                                        TRUE ~ NA_character_)),\n                      levels = c(\"Normal\",\n                                 \"Elevated\",\n                                 \"Hypertension 1\",\n                                 \"Hypertension 2\",\n                                 \"Hypertensive Crisis\")))\n\n\nblood_pressure  %>% \n  filter(morning == TRUE) %>% \n  ggplot(aes(x= date, y = value, group = type, col = stage)) +\n  geom_smooth(span = 0.7, alpha = 0.4, col = \"grey40\", se = FALSE) +\n  geom_point(size = 3, alpha = 0.7) + \n  scale_color_brewer(palette = \"RdYlGn\", direction = -1) +\n  labs(title = \"Blood pressure\",\n       subtitle = \"Systolic and Diastolic\",\n       caption = '@taraskaduk | taraskaduk.com')\n\nActivity data frame\nAnother dataset in Apple Health is your Apple Watch’s activity: Move, Exercise and Stand rings that you have daily. The grain is daily, and there is a reading and a goal for each metric (kind of redundant for Stand and Exercise, as these goals don’t change, but I guess it’s easier that way). Looking at str(df_activity):\n\n 'data.frame':  130 obs. of  8 variables:\n $ dateComponents        : Factor w/ 130 levels \"2018-11-04\",\"2018-11-05\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ activeEnergyBurned    : Factor w/ 128 levels \"0\",\"1017.62\",..: 1 1 1 48 19 96 99 30 110 31 ...\n $ activeEnergyBurnedGoal: Factor w/ 4 levels \"0\",\"760\",\"770\",..: 1 1 1 2 2 2 2 2 2 2 ...\n $ activeEnergyBurnedUnit: Factor w/ 1 level \"kcal\": 1 1 1 1 1 1 1 1 1 1 ...\n $ appleExerciseTime     : Factor w/ 75 levels \"0\",\"1\",\"10\",\"102\",..: 1 1 1 22 73 44 40 7 38 4 ...\n $ appleExerciseTimeGoal : Factor w/ 1 level \"30\": 1 1 1 1 1 1 1 1 1 1 ...\n $ appleStandHours       : Factor w/ 12 levels \"0\",\"10\",\"11\",..: 1 1 1 3 8 7 8 7 6 7 ...\n $ appleStandHoursGoal   : Factor w/ 1 level \"12\": 1 1 1 1 1 1 1 1 1 1 ...\nWith a bit of data wrangling, you can do lots of cool stuff. I maxed out the acceptable amount of vanilla charts in this post, so let me do another tile chart again. This will require a bit of R code though, but stay with me here.\n\n#Some data clean up  and renaming here\ndf_activity_tidy <- df_activity %>% \n  select(-activeEnergyBurnedUnit) %>% \n  mutate_all(as.character) %>% \n  mutate(date = as.Date(dateComponents)) %>% \n  filter(date >= \"2018-11-13\") %>% \n  select(-dateComponents) %>% \n  mutate_if(is.character, as.numeric) %>% \n  rename(move = activeEnergyBurned,\n         exercise = appleExerciseTime,\n         stand = appleStandHours,\n         move_goal = activeEnergyBurnedGoal,\n         exercise_goal = appleExerciseTimeGoal,\n         stand_goal = appleStandHoursGoal) %>% \n#Now, create 2 new metrics: percent of goal and a \"Yes/No\" flag.\n  mutate(move_pct = move/move_goal,\n         exercise_pct = exercise/exercise_goal,\n         stand_pct = stand/stand_goal,\n         move_bool = if_else(move_pct < 1, FALSE, TRUE),\n         exercise_bool = if_else(exercise_pct < 1, FALSE, TRUE),\n         stand_bool = if_else(stand_pct < 1, FALSE, TRUE))\nI’ll gather my data 3 times for each metric (and won’t write a function, go tell @drob on me), and stitch it together to get a tall dataset.\n\ndf_activity_tall_value <- df_activity_tidy %>% \n  select(date, Move = move, Exercise = exercise, Stand = stand) %>% \n  gather(category, value, -date)\n\ndf_activity_tall_pct <- df_activity_tidy %>% \n  select(date, Move = move_pct, Exercise = exercise_pct, Stand = stand_pct) %>% \n  gather(category, pct, -date)\n\ndf_activity_tall_bool <- df_activity_tidy %>% \n  select(date, Move = move_bool, Exercise = exercise_bool, Stand = stand_bool) %>% \n  gather(category, boolean, -date)\n  \ndf_activity_tall <- df_activity_tall_value %>% \n  left_join(df_activity_tall_pct, by = c(\"date\", \"category\")) %>% \n  left_join(df_activity_tall_bool, by = c(\"date\", \"category\")) %>% \n  mutate(category = as_factor(category, levels = c(\"Move\", \"Exercise\", \"Stand\")),\n         month = ymd(paste(year(date), month(date), 1, sep = \"-\")),\n         week = date - wday(date) + 1,\n         wday = wday(date),\n         day = day(date))\nNow, I can visualize this in many different ways. I like the boolean metric, and so I’ll use that:\n\ndf_activity_tall %>% \n  ggplot(aes(x = wday, y = week, fill = boolean)) +\n    geom_tile(col = \"grey30\", na.rm = FALSE) +\n    theme(panel.grid.major = element_blank()) +\n    scale_fill_manual(values = c(\"grey80\", \"#1a9641\")) +\n    facet_wrap(~ category) +\n    coord_fixed(ratio = 0.15) +\n    guides(fill=FALSE) +\n    labs(title = \"Apple Watch goals completion\",\n         caption = '@taraskaduk | taraskaduk.com') +\n    theme(axis.text.x = element_blank())\n\nOr, I could match color to activity, but then I’d need to remove all FALSE values:\n\ndf_activity_tall %>% \n  filter(boolean == TRUE) %>% \n  ggplot(aes(x = wday, y = week, fill = category)) +\n    geom_tile(col = \"grey50\", na.rm = FALSE) +\n    theme(panel.grid.major = element_blank()) +\n    facet_wrap(~ category) +\n    coord_fixed(ratio = 0.15) +\n    guides(fill=FALSE) +\n    labs(title = \"Apple Watch goals completion\",\n         caption = '@taraskaduk | taraskaduk.com') +\n    theme(axis.text.x = element_blank())\n\nYou can even do yourself a “Don’t Break The Chain” tracker, adding data from other tables and other sources:\n\nAnd since we’re on the subject, you can do something like a streak count chart, seeing how long of a streak you can get:\n\ndf_activity_streak <- df_activity_tall_bool %>% \n  mutate(category = as_factor(category, levels = c(\"Move\", \"Exercise\", \"Stand\"))) %>% \n  arrange(category, date) %>% \n  group_by(category, \n           x = cumsum(c(TRUE, diff(boolean) %in% c(-1))),\n           y = cumsum(c(TRUE, diff(boolean) %in% c(-1,1)))) %>% \n  mutate(streak = if_else(boolean == FALSE, 0L, row_number())) %>% \n  ungroup() \n\n\nggplot(df_activity_streak, aes(x = date, y = streak, group = x, col = category)) +\n  geom_line() +\n  facet_grid(category~.) +\n  guides(fill=FALSE) +\n  labs(title = \"Streak Count\",\n       caption = '@taraskaduk | taraskaduk.com')\n\nFinal Thoughts\nIf you’re a health nut and an Mac-head like me and happen have an iPhone and an Apple Watch ⌚️ - chances are there is a lot of data sitting in your Health app. Whether you want to just play with it (as much as I hate this colloquialism - it is sometimes unavoidable), or use it with some purpose - it is really easy to dig into it. Hope this post will help you get statred, as well as provide some ideas for your own purposes. Feel free to share your charts, but don’t forget to hide sensitive data (erasing a y-axis is a start)!\n\n\n",
    "preview": "posts/2019-03-23-apple-health/energy2.png",
    "last_modified": "2021-01-09T21:05:43-05:00",
    "input_file": {},
    "preview_width": 2400,
    "preview_height": 1800
  },
  {
    "path": "posts/2019-02-18-weather/",
    "title": "Where are the places with the best (and the worst) weather in the United States?",
    "description": "Using NOAA GSOD data in determining the amount of pleasant days in USA's core-based statistical areas",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2019-02-18",
    "categories": [],
    "contents": "\n\nContents\nIntroduction\nMethodology\nResults\nDiscussion\nUpdate 2019-12-01\n\nIntroduction\nIn my life, I have moved around a bit, and I always think about my next stop. There is a host of factors to consider, and I’ve seen quite a few great online tools that, for example, help you determine your ideal country based on your political views, preferences and other factors. But what about a domestic move? With a country as large and diverse as the United States, there are many places here that are quite different from one another.\nAbout a year ago or so, I saw a post called “The Pleasant Places to Live” (Norton 2014) showing the locations by the amount of pleasant days in a year.1 My thinking along these lines is that weather is an important factor in determining where to live. Given the weather data for cities of interest, one could define what “pleasant” weather is, and rank the locations according to such weather “pleasantness”.\nMethodology\nAfter testing quite a few different approaches, I settled on the same data source used by Norton: NOAA’s Global Summary Of The Day database (DOC/NOAA/NESDIS/NCDC > National Climatic Data Center, NESDIS, NOAA, U.S. Department of Commerce n.d.). I extracted years 2012 through 2017 for all US-based weather stations, cleaned it up, filtered it out, did some averaging and fitted a linear regression for every location based on year and day of the year to fill in several missing values.\nI then applied this data to 929 metropolitan and micropolitan statistical areas.\nUsing the idea of counting pleasant days as the approach in measuring weather from sources cited above, I followed the same method. Determining ideal weather conditions is both subjective and depends on other conditions, such as setting (indoor or outdoor), activity (working, sleeping etc.) and other factors.2345678 While some studies have been performed on optimal temperature setting for some specific context (Wei et al. 2017), the overall question remains inherently subjective and arbitrary.\nRealizing full subjectivity of the parameters set below, my definition of a pleasant (or nice) day is that of a day when:\nthe max temperature was under 32°C but above 16°C\nthe min temperature was above 4°C but under 21°C\nthe mean temperature was between 13°C and 24°C\nno significant rain or snow\nResults\nOverall map\nWhile not within the scope of this analysis, I had some world data that I visualized while working on the article:\n\nSneak peak: places with most (and least) pleasant days in a year. Average of 4 years of daily data from ~29,000 @NOAA weather stations. Originally inspired by @kellegous's USA map (https://t.co/mlrmYV9NjA). Blog post coming up.#rstats #ggplot #tidyverse pic.twitter.com/8PCpRbQyvw— Taras Kaduk (@taraskaduk) June 19, 2018\n\n\nSpecific to the United States, the map shows that areas of most pleasant weather include the West Coast and Florida.\n\n50 best and worst\nMoving on to the rankings. Below is the chart design I settled on. Each chart shows 50 metropolitan and/or micropolitan areas, ranked by their average amount of pleasant days in years 2012-2017. The year 2017 is displayed for each area as a tile chart: months on y-axis, days of the month on x-axis. Areas are sorted according to the chart: from most to least in “most pleasant days”, and from least to most in “least pleasant days”: the most winner or loser is always on top\nTop 50 best, all metropolitan and micropolitan\nThis is top 50 out of all areas for which there is data. Nothing surprising at the top, with California leading the way. Tennessee was a bit of a surprise to me (these smaller towns also don’t seem to report a lot or any rain, which is suspicious). Also, it changed my frame of reference about Florida a bit: I live here now, and I consider it unpleasant (because it is very hot in the summer), but I must agree that our winters are very nice, and it looks like we’ve got it good compared to the rest of the country.\n[Full-size vertical version] | [Full-size horizontal version]\nTop 50 worst, all metropolitan and micropolitan\nIn the “worst” section, we see all the usual suspects: Wyoming, Alaska, Montana, North Dakota. Also, Puerto Rico and Key West, FL are the only places that are too hot: the rest is too cold. \nTop 50 best metro areas\nMicropolitan areas are not always on everyone’s mind, and therefore I wanted to look at metro areas specifically. No surprise here either, with California and Florida having the 2/3 of top 50 metro areas. The first non-California metro area is Serbing, FL, 11th in the rank. \nTop 50 worst metro areas\nOver on the other side, not so pleasant places still include Puerto Rico and the Northern USA, but now we see a lot more of Eastern Washington and Oregon, along with that cold Northeast.\n\nTop 25 best and worst metro areas with population over 1,000,000 people\nFinally, I ranked the biggest metro areas - the ones with the population over 1 million - in the same way. Here are 25 best and worst metro areas with over 1,000,000 people. This time, I used a different design, displaying all 6 years per metro area as “tree rings”, using polar coordinates\n\n\n\n\nDiscussion\nI feel very good about letting these imperfect charts out into the wild. Mostly, I feel liberated to be able to move on and do other things. Funny enough, one of these “other things” is to re-do this analysis, but keep it simpler and rely on existing packages rather than reinventing the wheel. Why re-do? Well, I still want to work on this project “Best place to live”, and weather is one important metric out of many. But this time around, I won’t need all the precision, all the complexity, all the ggplot wizardry: I’ll just accept a simple and somewhat imperfect metric as a proxy, as it will be one of many other numbers. So, stay tuned!\nUpdate 2019-12-01\nThis post has been referenced or credited on the following pages:\nDIGG.com: https://digg.com/2019/top-25-cities-most-pleasant-days-data-viz\nCBS13 Sacramento: https://gooddaysacramento.cbslocal.com/2019/04/30/sacramento-pleasant-weather/\nRevolutions Analytics: https://blog.revolutionanalytics.com/2019/03/best-and-worst-weather.html\nReddit:\nVisualization of mean daily temperatures over the past five full years for 12 Canadian cities: https://www.reddit.com/r/dataisbeautiful/comments/b6qle0/visualization_of_mean_daily_temperatures_over_the/\nMean daily temperatures over the past 5 years for Ottawa and 11 other Canadian cities: https://www.reddit.com/r/ottawa/comments/b6vupb/mean_daily_temperatures_over_the_past_5_years_for/\n\nMy own submission at r/dataisbeautiful: https://www.reddit.com/r/dataisbeautiful/comments/byjies/top_25_world_cities_with_most_pleasant_days_in_a/\n\n\n\nBrettschneider, Brian. 2018. “What Cities Have the Most Nice Days in America?” Washington Post, August. https://www.washingtonpost.com/news/capital-weather-gang/wp/2018/08/07/the-united-states-of-nice-days-heres-where-and-when-to-find-the-nations-most-frequent-ideal-weather/.\n\n\nDOC/NOAA/NESDIS/NCDC > National Climatic Data Center, NESDIS, NOAA, U.S. Department of Commerce. n.d. “Global Surface Summary of the Day - GSOD.” DOC/NOAA/NESDIS/NCDC > National Climatic Data Center, NESDIS, NOAA, U.S. Department of Commerce. Accessed February 18, 2019. https://data.noaa.gov/dataset/dataset/global-surface-summary-of-the-day-gsod.\n\n\nNorton, Kelly. 2014. “The Pleasant Places to Live.” February 3, 2014. https://kellegous.com/j/2014/02/03/pleasant-places/.\n\n\nWei, Wenqi, Jackson G. Lu, Adam D. Galinsky, Han Wu, Samuel D. Gosling, Peter J. Rentfrow, Wenjie Yuan, et al. 2017. “Regional Ambient Temperature Is Associated with Human Personality.” Nature Human Behaviour 1 (12): 890–95. https://doi.org/10.1038/s41562-017-0240-0.\n\n\nAfter concluding my analysis, I found a similar article in Washington Post, centered around the same concept of pleasant days (Brettschneider 2018). There was no reference to the 2014 article by Norton↩︎\nhttps://www.reddit.com/r/askscience/comments/ulxdg/what_is_the_ideal_temperature_of_surroundings_for/↩︎\nhttps://www.healthyheating.com/solutions.htm#.XMnNYJO6Mne↩︎\nhttps://www.scientificamerican.com/article/why-people-feel-hot/↩︎\nhttps://www.city-data.com/forum/general-u-s/54730-what-your-ideal-outdoor-temperature-4.html↩︎\nhttps://health.clevelandclinic.org/what-is-the-ideal-sleeping-temperature-for-my-bedroom/↩︎\nhttps://www.outsideonline.com/1784591/whats-best-temperature-productivity↩︎\nhttps://www.sleep.org/temperature-for-sleep/↩︎\n",
    "preview": "posts/2019-02-18-weather/25_most_1000_polar_.png",
    "last_modified": "2021-01-10T13:17:34-05:00",
    "input_file": {},
    "preview_width": 3600,
    "preview_height": 3300
  },
  {
    "path": "posts/2018-03-29-power-query/",
    "title": "Power Query: Excel's gateway to reproducible analysis",
    "description": "Review of Power Query's scripting language as a way to evangelize reproducible data analysis and programming with minimal learning investment",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2018-03-29",
    "categories": [],
    "contents": "\n\n\n\nIntro\nIn this blog post, I’ll try to highlight some of Excel’s functionality which have been around for a while, but remains largely unknown to the broad public.\nNow, I’ll be the first one to throw rocks at the Excel camp. I’ve got receipts:\n\nPlease don't... pic.twitter.com/r3j3KQtcCT— Taras Kaduk (@taraskaduk) February 10, 2018\nMy analysis is in Excel. #Loseyourjobin5words— Taras Kaduk (@taraskaduk) March 5, 2018\nReproducible analysis, case in point. A colleague from another department is out. People come to me w/ requests to recreate some analysis that person did. I have no idea, but OK, let's see. Colleague's analysis is in Excel. How can I reproduce it? No analysis for you! pic.twitter.com/SoXZO10ekG— Taras Kaduk (@taraskaduk) November 27, 2017\n\n\nHowever, I’ll also be the first to jump in Excel’s defense whenever an opportunity presents itself:\n\nGenerally a very good article on advantages of R, but as always - completely overlooking Excel enhancements that came with Power Query and Power Pivot (e.g. scripting, hundreds of data connectors. I.e. all the Power BI functionality)#rstats #PowerBI https://t.co/k3qj8px81b— Taras Kaduk (@taraskaduk) December 27, 2017\n\n\nWhat gives? I generally agree that Excel is a bad way to conduct an analysis. Having said that, there are many enhancements to the product (Windows version mainly) that came out over the last 10 years which are completely overlooked by both Excel users and Excel bashers. One of such enhancements, Power Query (or Query Editor, or M language), allows for a reproducible data import and transformation, and is quite easy to learn. That will be this post’s topic.\nWhat this post isn’t about\nExcel cell formulas\nVBA\nPower Pivot and data modeling\nDAX and Excel / Power BI measures\nPower Query’s and M’s history\nfull functionality of Power Query\nExcel on a Mac\nThe audience\nThis post isn’t a guide to using Excel’s and Power BI’s Power Query. This post is not for people who want to learn new cool tricks of Excel.\nThis post is for data scientists and analysts who put reproducible analysis (achieved via programming one’s analysis in R or Python) at the center of what they do. This post is for people who like to use Excel as a punching bag (and again, I am one of those people).\nLastly, this post is for those analysts stuggling to switch the workflow at their place of work from Excel to R or Python. I think that Power Query could act as a gateway drug to reproducible analysis. Meet them where they’re at (in Excel), and guide them by hand out into the world of “programming your analysis”.\nPower Query\nPower Query, a.k.a. Data Explorer, a.k.a. Query Editor is Microsoft’s module within Excel and Power BI which allows users to perform data import and transformations before loading the ready tables into a workbook. It’s been around since 2013. Google for more information.\nComponents\nIn the simplest terms possible, I could break the Power Query down into two parts: the language and the GUI.\nThe M language\nFrom MSDN:\n\nThe Power Query M formula language is optimized for building highly flexible data mashup queries. It’s a functional, case sensitive language similar to F#\n\nIn simpler terms, it is a data transformation language. Now, I’m not a computer scientist, and won’t be able to explain all the technical details well, therefore I suggest that the most interested ones go and check out the Power Query M language specification. For the rest of us, I’ll just say that M works by calling a function on a table or a list, then storing this result as a new table, and then calling this new table in the next step with another function. That is oversimplification, of course, but for the purpose of this post, it should do.\nExample 1\nLet me explain it on an example. In Excel, I created sample table of 3 rows and 3 columns called df. \nI then loaded it into the query editor, and pressed a few buttons. Here is the code it generated (I edited the step names and indented the lines):\n\nlet\n    Source = Excel.CurrentWorkbook(){[Name=\"df\"]}[Content],\n    change_type = Table.TransformColumnTypes(Source,\n                                            {\n                                              {\"a\", Int64.Type}, \n                                              {\"b\", Int64.Type}, \n                                              {\"c\", Int64.Type}\n                                            }),\n    filter = Table.SelectRows(change_type, each ([a] <> 7)),\n    remove_cols = Table.RemoveColumns(filter,{\"c\"})\nin\n    remove_cols\nThe final output will look like this: \nThe first step, Source, is our import step. It tells Power Query where to find our table. The second step, change_type\", is auto-generated. Notice that it references the first step as the first argument of the function Table.TransformColumnTypes: it says “that’s the table we will work with”. All this step does is assigns columns a, b and c the type of integer. Next step, filter, references the previous step, and performs a filter operation. Finally, remove_cols takes the result of the previous step, and then removes a column. Then, the code tells Power Query that the result of remove_cols is the one to be printed.\nThis is a very basic explanation of how this code works. You can twist it, bend it to your will, skip steps, branch out, use parameters etc. But the common functionally is this stitched freight train-like sequence of steps.\nExample 2\nHere is the data transformation sample from David Robinson’s DataCamp course on the tidyverse\n\n\n\nI hope I don’t need to read to you what it does (if you can’t read the code, try running it. If you have no idea what’s going on here - I suggest taking the above-mentioned David’s class on the tidyverse)\nHere is how I’d solve the same simple task in Power Query. First, Power Query in Excel, unlike Power Query in Power BI, can’t run R scripts, therefore I can’t just load a package. But Power Query can read .RData files. It can also load stuff from the web. We’ll do just that\n\nlet\n    Source = Web.Page(\n                Web.Contents(\"https://github.com/jennybc/gapminder/blob/master/inst/extdata/gapminder.tsv\")),\n    Data = Source{0}[Data],\n    col_types = Table.TransformColumnTypes(Data,{\n                                                  {\"\", type text}, \n                                                  {\"country\", type text}, \n                                                  {\"continent\", type text}, \n                                                  {\"year\", Int64.Type}, \n                                                  {\"lifeExp\", type number}, \n                                                  {\"pop\", Int64.Type}, \n                                                  {\"gdpPercap\", type number}\n                                                }),\n    filter = Table.SelectRows(col_types, each ([year] = 2007)),\n    mutate = Table.AddColumn(filter, \"lifeExpMonths\", each [lifeExp] * 12, type number),\n    arrange = Table.Sort(mutate,{{\"lifeExpMonths\", Order.Descending}})\nin\n    arrange\nNow, again, I changed the names of the steps and indented the code for readability purposes. The rest was generated by Power Query and I was just clicking on things. I want to stress it out again: I didn’t have to know any of the functions, any of the syntax. All I did was:\nPass a web link into GUI.\nFrom there, Power Query figured out that it needed a combo of Web.Page(Web.Contents()) to get to the data. It saw a table and guessed column types for me.\nFrom here, I clicked on the “year” column header to filter it, clicked a button to create a new column out of the old one, and the clicked on its header to sort in descending order.\nIn other words, I came to this with no pre-existing knowledge of coding, and got myself a reproducible piece of code. The data refreshes upon each load: Excel will be checking Jenny’s GitHub page every time we refresh the data, and will be applying the steps as documented.\nThe GUI\nAs you may have guessed from my previous paragraph, the Query Editor GUI is bread and butter of this whole scheme: the M language itself is hard to type by hand, the functions are long, it is case sensitive, and there is no good source code editor (Notepad++ and other text editors do a better job than the Power Query itself). But I feel like Power Query wasn’t built to program in: that’s not the main customer base of Excel and Power BI. What Power Query is good at is its GUI that allows users to click around and apply data transformation steps, all the while generating a script behind the scenes.\nFirst, there is a ribbon with several tabs and plenty of buttons to click on. Some represent very simple existing functions, while others are pretty complicated and generate a solid chunk of code on just one click.\n\nNext, you are allowed to interact with your data to some extend. You can’t edit any cells, but you can filter columns, move them around, fill them down, sort, and so on, within the table itself. Power Query will pick up on your actions and will save your transformations in a script.\n\nYou can have more than one query, coming from different sources, and you can make them interact with each other: merge (join), append (union), reference, split, nest and so on.\nYou can also re-arrange the query steps in the GUI via simple drag-n-drop, and your script will be re-written to reflect the new order.\nWhat I like about Power Query\nThere are quite a few things I like about Power Query:\nLearning curve. It’s easy to get started with Power Query and create functional reproducible scripts out of the gate. The powerful GUI allows for that. No setup necessary: no installation, fine tuning, no ODBC drivers and connections. It just works out of the box. Almost like it wasn’t Microsoft creating it.\nAccessing data. Getting the data is the most seamless experience I’ve had. It has pre-built functions for many data sources (I’ve got receipts: here is the list of functions), and can recognize a large amount of data formats. It doesn’t require any ODBC setup. The Power Query flavor that runs on Power BI can also use R scripts as a data source or a data step, yet this functionality isn’t a part of Excel yet.\nTidy-like data storage and display. Surprised? Yeah, with a few exceptions, Power Query treats everything as a data frame. What if it’s not a data frame? Then it tries to fit the data into a rectangular shape. I’d like to show a few examples.\nHere is an example of how Power Query treats JSON files. I used the well-known (thanks to Jenny Bryan’s tutorials!) API of Ice and Fire. Here is what I’ve got after a few clicks. Note that I only plugged in the API call as a URL - Power Query did the rest.\n It is a data frame, but it has a nested list column for titles. Neat!\nNot only JSON records get nested. You could have a nested table (can happen upon a join or after a group_by-like call), or a nested list. Regardless, Power Query will always try to make your data rectangular, which is pleasing to any tidyverse adept. Here is another example. I took the same Gapminder dataset, and nested it, grouping by country. The table above is now how Power Query sees the table. The data frame below is a sneak peek into one of the nested cells for the United Kingdom. The function up on top is the step I applied to nest the data frame:\n\nOne more example. Here is how Power Query sees a folder full of files:\n\nLikewise, if you told Power Query to access a database, and didn’t specify SQL statement, it would return a data frame of all tables and views in that database, and you can take it from there.\nRobust GUI that keeps the code. Another cool feature is that the GUI can handle 90% of one’s needs, and it scripts all transformations behind the scenes. I think of it as a gateway drug to “programming one’s analysis”\nWhat I don’t like about Power Query\nSpeed. It is unbelievably slow. I guess the convenience comes at a cost of performance. It does well on small datasets and simpler operations, but fails to do a decent job the moment you scale.\nSyntax and flexibility. The language is rather rigid, and the syntax is annoying at times.\nLimits. It can only do so much. You can import and transform the data, but you can’t do anything else here.\nConclusion\nWhat we have these days is several generations of knowledge workers trained on doing their analysis in Excel. Just bashing the tool is not productive. We think we provide better alternatives with R or Python, but we frequently forget about the learning curve associated not only with learning a new language, but also with learning a language for the first time. Excel’s Power Query could serve as an important stepping stone in taking the analysis out of the Wild West world of Excel VLOOKUPs into the world of reproducible code, git repos and other warm and fuzzy things.\n\n\n",
    "preview": "posts/2018-03-29-power-query/cover.png",
    "last_modified": "2021-01-09T21:05:43-05:00",
    "input_file": {},
    "preview_width": 1461,
    "preview_height": 789
  },
  {
    "path": "posts/2017-11-26-pixel-maps/",
    "title": "Create World Pixel Maps in R",
    "description": "A walk-through of generating personalized pixel maps with R from scratch.",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2017-11-26",
    "categories": [],
    "contents": "\nToday, I’m going to show you how to make pixel maps in R. Why pixel maps? Because they look awesome!\nI was searching on the web for a while, but couldn’t find a good tutorial. Being stubborn as I am, I eventually figured out a way to get what I want. You know, if you torture your code enough, it might give you what you need.\nSetup\nThe workflow here is very lightweight, and only requires tidyverse and maps to be loaded.\n\n\nlibrary(tidyverse)\nlibrary(maps)\n\n\n\nPersonal coordinates\nNext, as we are trying to make this map personal, you’ll need to supply a list of data points to map: places you’ve lived, places you’ve traveled to, and so on. I will leave you to your own devices here, whether you want to do some reverse geocoding, or look coordinates up one by one is up to you. The desired outcome here is a data frame containing latitude and longitude coordinates of the places you want to map.\n\n\n\n{\"columns\":[{\"label\":[\"city\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"state\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"country\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"lat\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lon\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flag\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"San Francisco\",\"2\":\"CA\",\"3\":\"United States\",\"4\":\"37.75610\",\"5\":\"-122.442900\",\"6\":\"been\"},{\"1\":\"Atlanta\",\"2\":\"GA\",\"3\":\"United States\",\"4\":\"33.76270\",\"5\":\"-84.423100\",\"6\":\"been\"},{\"1\":\"Maggie Valley\",\"2\":\"NC\",\"3\":\"United States\",\"4\":\"35.52400\",\"5\":\"-83.064300\",\"6\":\"been\"},{\"1\":\"Paris\",\"2\":\"NA\",\"3\":\"France\",\"4\":\"48.86715\",\"5\":\"2.331255\",\"6\":\"been\"},{\"1\":\"Denver\",\"2\":\"CO\",\"3\":\"United States\",\"4\":\"39.76210\",\"5\":\"-104.875900\",\"6\":\"been\"},{\"1\":\"Enumclaw\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.20180\",\"5\":\"-121.989800\",\"6\":\"been\"},{\"1\":\"Saint Augustine\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"29.89790\",\"5\":\"-81.310000\",\"6\":\"been\"},{\"1\":\"Seattle\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.62121\",\"5\":\"-122.353633\",\"6\":\"been\"},{\"1\":\"Orangeburg\",\"2\":\"SC\",\"3\":\"United States\",\"4\":\"33.49280\",\"5\":\"-80.867100\",\"6\":\"been\"},{\"1\":\"Port Angeles\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"48.11410\",\"5\":\"-123.456500\",\"6\":\"been\"},{\"1\":\"Kyiv\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"50.45010\",\"5\":\"30.523400\",\"6\":\"been\"},{\"1\":\"Westport\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"46.89190\",\"5\":\"-124.112000\",\"6\":\"been\"},{\"1\":\"Ocala\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"29.18030\",\"5\":\"-82.148700\",\"6\":\"been\"},{\"1\":\"Charleston\",\"2\":\"SC\",\"3\":\"United States\",\"4\":\"32.81370\",\"5\":\"-79.964300\",\"6\":\"been\"},{\"1\":\"Snoqualmie\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.52920\",\"5\":\"-121.840900\",\"6\":\"been\"},{\"1\":\"Vancouver\",\"2\":\"BC\",\"3\":\"Canada\",\"4\":\"49.28273\",\"5\":\"-123.120738\",\"6\":\"been\"},{\"1\":\"Orlando\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"28.48010\",\"5\":\"-81.344800\",\"6\":\"been\"},{\"1\":\"Washington\",\"2\":\"DC\",\"3\":\"United States\",\"4\":\"38.89011\",\"5\":\"-77.036719\",\"6\":\"been\"},{\"1\":\"San Diego\",\"2\":\"CA\",\"3\":\"United States\",\"4\":\"32.83120\",\"5\":\"-117.122500\",\"6\":\"been\"},{\"1\":\"Los Angeles\",\"2\":\"CA\",\"3\":\"United States\",\"4\":\"34.11400\",\"5\":\"-118.406800\",\"6\":\"been\"},{\"1\":\"New York\",\"2\":\"NY\",\"3\":\"United States\",\"4\":\"40.69430\",\"5\":\"-73.924900\",\"6\":\"been\"},{\"1\":\"Anaheim\",\"2\":\"CA\",\"3\":\"United States\",\"4\":\"33.83900\",\"5\":\"-117.857200\",\"6\":\"been\"},{\"1\":\"Savannah\",\"2\":\"GA\",\"3\":\"United States\",\"4\":\"32.02820\",\"5\":\"-81.178400\",\"6\":\"been\"},{\"1\":\"Forks\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.95260\",\"5\":\"-124.390600\",\"6\":\"been\"},{\"1\":\"Ormond Beach\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"29.29510\",\"5\":\"-81.099900\",\"6\":\"been\"},{\"1\":\"Rincon\",\"2\":\"PR\",\"3\":\"United States\",\"4\":\"18.33890\",\"5\":\"-67.251500\",\"6\":\"been\"},{\"1\":\"Portland\",\"2\":\"OR\",\"3\":\"United States\",\"4\":\"45.53720\",\"5\":\"-122.650000\",\"6\":\"been\"},{\"1\":\"Ruby Beach\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.71087\",\"5\":\"-124.415402\",\"6\":\"been\"},{\"1\":\"Mount Vernon\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"48.42030\",\"5\":\"-122.311400\",\"6\":\"been\"},{\"1\":\"Hannah Park\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"30.37093\",\"5\":\"-81.406772\",\"6\":\"been\"},{\"1\":\"Oak Harbor\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"48.29650\",\"5\":\"-122.633100\",\"6\":\"been\"},{\"1\":\"Eastsound\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"48.69680\",\"5\":\"-122.905500\",\"6\":\"been\"},{\"1\":\"Mount Rainier\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"46.85231\",\"5\":\"-121.760323\",\"6\":\"been\"},{\"1\":\"Olympia\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.04170\",\"5\":\"-122.895800\",\"6\":\"been\"},{\"1\":\"Banner Elk\",\"2\":\"NC\",\"3\":\"United States\",\"4\":\"36.15880\",\"5\":\"-81.867700\",\"6\":\"been\"},{\"1\":\"Robbinsville\",\"2\":\"NC\",\"3\":\"United States\",\"4\":\"35.32214\",\"5\":\"-83.808309\",\"6\":\"been\"},{\"1\":\"Hollywood\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"26.02930\",\"5\":\"-80.167900\",\"6\":\"been\"},{\"1\":\"Key West\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"24.56360\",\"5\":\"-81.776800\",\"6\":\"been\"},{\"1\":\"Key Largo\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"25.12240\",\"5\":\"-80.412000\",\"6\":\"been\"},{\"1\":\"Philadelphia\",\"2\":\"PA\",\"3\":\"United States\",\"4\":\"39.95219\",\"5\":\"-75.163516\",\"6\":\"been\"},{\"1\":\"Leavenworth\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.59430\",\"5\":\"-120.663300\",\"6\":\"been\"},{\"1\":\"Jacksonville\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"30.33220\",\"5\":\"-81.674900\",\"6\":\"been\"},{\"1\":\"Boston\",\"2\":\"MA\",\"3\":\"United States\",\"4\":\"42.36553\",\"5\":\"-71.057234\",\"6\":\"been\"},{\"1\":\"Portland\",\"2\":\"ME\",\"3\":\"United States\",\"4\":\"43.65399\",\"5\":\"-70.293500\",\"6\":\"been\"},{\"1\":\"New Orleans\",\"2\":\"LA\",\"3\":\"United States\",\"4\":\"29.95536\",\"5\":\"-90.067277\",\"6\":\"been\"},{\"1\":\"Fargo\",\"2\":\"GA\",\"3\":\"United States\",\"4\":\"30.68810\",\"5\":\"-82.572100\",\"6\":\"been\"},{\"1\":\"Canon Beach\",\"2\":\"OR\",\"3\":\"United States\",\"4\":\"45.89177\",\"5\":\"-123.961527\",\"6\":\"been\"},{\"1\":\"Bainbridge Island\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.64390\",\"5\":\"-122.543400\",\"6\":\"been\"},{\"1\":\"Austin\",\"2\":\"TX\",\"3\":\"United States\",\"4\":\"30.26193\",\"5\":\"-97.739262\",\"6\":\"been\"},{\"1\":\"Kyiv\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"50.45010\",\"5\":\"30.523400\",\"6\":\"lived\"},{\"1\":\"Jacksonville\",\"2\":\"FL\",\"3\":\"United States\",\"4\":\"30.33220\",\"5\":\"-81.674900\",\"6\":\"lived\"},{\"1\":\"Seattle\",\"2\":\"WA\",\"3\":\"United States\",\"4\":\"47.62121\",\"5\":\"-122.353633\",\"6\":\"lived\"},{\"1\":\"Kremenchuk\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"49.06000\",\"5\":\"33.420000\",\"6\":\"lived\"},{\"1\":\"Hurgada\",\"2\":\"NA\",\"3\":\"Egypt\",\"4\":\"27.20000\",\"5\":\"33.800000\",\"6\":\"been\"},{\"1\":\"Cairo\",\"2\":\"NA\",\"3\":\"Egypt\",\"4\":\"30.00000\",\"5\":\"31.200000\",\"6\":\"been\"},{\"1\":\"Skopje\",\"2\":\"NA\",\"3\":\"Macedonia\",\"4\":\"42.00000\",\"5\":\"21.400000\",\"6\":\"been\"},{\"1\":\"Warsaw\",\"2\":\"NA\",\"3\":\"Poland\",\"4\":\"52.20000\",\"5\":\"21.000000\",\"6\":\"been\"},{\"1\":\"Budapest\",\"2\":\"NA\",\"3\":\"Hungary\",\"4\":\"47.50000\",\"5\":\"19.100000\",\"6\":\"been\"},{\"1\":\"Moscow\",\"2\":\"NA\",\"3\":\"Russia\",\"4\":\"55.80000\",\"5\":\"37.600000\",\"6\":\"been\"},{\"1\":\"Odessa\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"46.50000\",\"5\":\"30.700000\",\"6\":\"been\"},{\"1\":\"Dnipro\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"48.50000\",\"5\":\"35.100000\",\"6\":\"been\"},{\"1\":\"Zaporizhya\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"47.80000\",\"5\":\"35.100000\",\"6\":\"been\"},{\"1\":\"Lviv\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"49.90000\",\"5\":\"24.000000\",\"6\":\"been\"},{\"1\":\"Rakhiv\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"48.10000\",\"5\":\"24.200000\",\"6\":\"been\"},{\"1\":\"Ivano-Frankivsk\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"48.90000\",\"5\":\"24.700000\",\"6\":\"been\"},{\"1\":\"Yaremche\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"48.40000\",\"5\":\"24.500000\",\"6\":\"been\"},{\"1\":\"Poltava\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"49.60000\",\"5\":\"34.500000\",\"6\":\"been\"},{\"1\":\"Uman\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"48.70000\",\"5\":\"30.200000\",\"6\":\"been\"},{\"1\":\"Sudak\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"44.80000\",\"5\":\"35.000000\",\"6\":\"been\"},{\"1\":\"Feodosia\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"45.10000\",\"5\":\"35.400000\",\"6\":\"been\"},{\"1\":\"Vinnytsya\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"49.20000\",\"5\":\"28.500000\",\"6\":\"been\"},{\"1\":\"Khmelnytskyi\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"49.40000\",\"5\":\"27.000000\",\"6\":\"been\"},{\"1\":\"Sevastopol\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"44.50000\",\"5\":\"33.500000\",\"6\":\"been\"},{\"1\":\"Evpatoria\",\"2\":\"NA\",\"3\":\"Ukraine\",\"4\":\"45.20000\",\"5\":\"33.300000\",\"6\":\"been\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nRounding the coordinates\nAs I’m creating a pixel map - I need dots in the right places. I’m going to plot a dot for each degree, and therefore I need my coordinates rounded to the nearest degree.\n\nFor smaller maps, consider a dot for each half of degree, in which case, round up to a .5 degree with a formula of y=round(x/5,0)*5\n\n\n\nGenerate a pixel grid\nThe next step is the key to getting a pixel map. We are going to fill the entire plot with a grid of dots - 180 dots from south to north, and 360 dots from east to west, but then only keep the dots that are on land. Simple!\n\nIf you consider a dot for each half a degree, then change the step from 1 to 0.5\n\n\nlat <- tibble(lat = seq(-90, 90, by = 1))\nlong <- tibble(long = seq(-180, 180, by = 1))\ndots <- lat %>% \n        merge(long, all = TRUE)\n\ndots <- dots %>% \n        mutate(country = map.where('world', long, lat),\n               lakes = map.where('lakes', long, lat)) %>% \n        filter(!is.na(country) & is.na(lakes)) %>% \n        select(-lakes)\n\n\n\nAt this point, you are pretty much done with prep work. The next step - creating the visuals - will be highly dependent on your data, your needs, and your wants.\nPlotting\nAs said earlier, this is where we part ways and you are left on your own. I will provide my personal workflow as an example, but it may not work best for your needs. It’s up to you and your creativity now!\nTheme\nI like defining a theme upfront. Mainly to remove all unnecessary chart features and define main colors.\n\n\ncolor_bk <- \"#212121\"\ntheme <- theme_void() +\n        theme(panel.background = element_rect(fill=color_bk),\n              plot.margin = unit(c(0, 0, 0, 0), \"cm\"))\n\n\n\n\n\nplot <- ggplot() +   \n        #base layer of map dots\n        geom_point(data = dots, \n                   aes(x=long, y = lat), \n                   col = \"grey45\", \n                   size = 0.7) + \n        #plot all the places I've been to\n        geom_point(data = locations, \n                   aes(x=long_round, y=lat_round), \n                   color=\"grey80\", \n                   size=0.8) + \n        #plot all the places I lived in, using red\n        geom_point(data = locations %>% \n                     filter(flag == 'lived'), \n                   aes(x=long_round, y=lat_round), \n                   color=\"red\", \n                   size=0.8) +\n        #an extra layer of halo around the places I lived in\n        geom_point(data = locations %>% \n                     filter(flag == 'lived'), \n                   aes(x=long_round, y=lat_round), \n                   color=\"red\", \n                   size=6, \n                   alpha = 0.4) +\n        #adding my theme\n        theme\n\n\n\n\n\n\nA large map like this is not particularly appealing. Zooming in or, say, removing Antarctica, could be a good approach.\n\n\nplot + scale_y_continuous(limits = c(10, 70), expand = c(0,0)) +\n        scale_x_continuous(limits = c(-150,90), expand = c(0,0))\n\n\n\n\nFinal comments\nObviously, there is so much more to do with this. The possibilities are endless. The basic idea is pretty simple - generate a point grid and plot rounded coordinates on top of the grid.\nLet me know if you find new implementations of this code!\nUpdate, 2020-09-07\nSince its publication, this blog post has been referenced on the following pages:\nPixel Maps in R: https://paulvanderlaken.com/2018/01/31/pixel-maps-in-r/\nPixel/Symbol Map Magic with ggplot: https://dadascience.design/post/r-pixel-symbol-map-magic-with-ggplot/\nhttps://github.com/lhehnke/tidytuesday\n\n\n\n",
    "preview": "posts/2017-11-26-pixel-maps/pixel-maps_files/figure-html5/plot-1.png",
    "last_modified": "2021-01-10T13:05:29-05:00",
    "input_file": {},
    "preview_width": 3840,
    "preview_height": 1920
  },
  {
    "path": "posts/2017-09-30-mpaa/",
    "title": "Do MPAA movie ratings mean anything?",
    "description": "Investigating the movie ratings and and their content. With R.",
    "author": [
      {
        "name": "Taras Kaduk",
        "url": "https://taraskaduk.com"
      }
    ],
    "date": "2017-09-30",
    "categories": [],
    "contents": "\nBeing a parent in modern days is lots of fun. Not only all of us are pretty much winging it, not having any idea what we’re doing1  — we are also constantly being watched and judged by other parents.\nWhen it comes to watching movies with our six-year-old son, we don’t have a strict set of rules. We pretty much fly by the seat of our pants with “I know it when I see it” approach to violence, profanity, or any other content. Not to say that we’re watching Pulp Fiction and Basic Instinct (the most challenging movie to date was probably Alice in the Wonderland), but all the movies we watch with our son are between G and PG - and we hardly can tell a difference between the two.\nThat’s why I was surprised to find out that some parents swear by this MPAA rating system, and use it religiously when deciding what their kids can and can’t watch.\nAnd it’d be all good if I haven’t noticed that these ratings are sometimes kind of… arbitrary? So, I decided to dig into the data. Because data will solve all of our problems, right?\nData set\nI searched around a bit, and stumbled upon this awesome website called kids-in-mind.com. It had a lot of info similar or equal to one contained on IMBd or Common Sense Media, but it had a crucial key component: every movie on this website is rated on an 11-point scale, from 0 to 10, on three metrics: sex & nudity, violence & gore, and profanity. Well, this is just perfect! Not only that — it also has that MPAA rating data point for every movie, which means I get all of my data in one sitting.\n\nSince the writing of this post, kids-in-mind.com has been drastically redesigned to the point where my scrapping code no longer works. And even if it worked, I still choose not to share the scraping script. Please inquire the data from kids-in-mind.com personally.\nSo, I wrote a little R script using rvest package, and got my data into a tidy data frame, and started exploring. After a little bit of data wrangling (I excluded NR movies as they are obviously not rated, and are all over the place. Also, Kids In Mind database didn’t have many NC-17 rated movies, therefore I combined them with R rated films), I got my first results.\nResults\nOn average, higher MPAA rating follows higher levels of inappropriate content, but…\nThe first result seemed fairly obvious: higher (stricter) MPAA ratings have a higher rate of violence, sex and profanity. On average. However, the amount of overlap is astonishing. Basically, any category is entirely consumed by its two neighboring categories.\nWhat’s more, you can always find a movie in a “lower” category that is more inappropriate than some other movie in a “higher” category: Jimmy Neutron VS Little Rascals, the 5th Harry Potter VS Life is Beautiful, Year One VS The King’s Speech etc.\nYou can see this from the figure below. You may also notice that there movies scoring 2.5 points on average that are in every MPAA category. We’ll come back to this later.\n\n\n\nMPAA is most forgiving on violence\nWell, no kidding! This was hardly a surprise. As a foreigner, I am constantly amused by how much violence is considered appropriate, contrasted with, for example, how little nudity is acceptable. Guts and blood? Body parts? Sure, bring it on! Naked breasts? How dare you!\nSo, next time you rent a G rated movie and think it is clean - think again. It’s probably just as violent as that other PG movie you wanted. Both G and PG movies center around 3 points on violence anyway, with max points being 5 for G and 6 for PG. Just go with PG then, eh?\n\n\n\nWhat the **** is up with profanity?\nNow, this is a zero tolerance zone in the movie world. Not sex and nudity, as I assumed. Profanity. Unlike other categories, where scores flow gradually from category to category, profanity has some clear trends:\nAll G movies are bundled up in a narrow 0-2 points corridor\nMost PG-13 movies are between 4 and 5 points on profanity\nR and NC-17 movies reside between 5 and 10 points\nI bet if I was trying to predict an MPAA rating based on these criteria, profanity would be the strongest predictor (not a concern of this post, but maybe later)\n\n\n\nLooking at R & NC-17 section, it is tempting to dive in a bit more. Let’s go!\n\n\n\nIndeed, movies in R & NC-17 categories are widely distributed across violence and sex, but snuggle tightly in the upper section of profanity. Why is that? Looking at the data, we can tell that often profanity accompanies other “R” worthy content. However, it is not always the case, and correlation is relatively weak. Good Will Hunting is neither violent nor sexually explicit, but it is profane AF, and, sure enough, is R rated for - wait for it - “strong language, including some sex-related dialogue”. It could be just me (after all, I am a foreigner, and English words don’t carry the same connotation for me), but I think it is mighty unfair to Good Will Hunting to be rated R, especially knowing that Scary Movie, parts 3 through 5, are rated PG-13.\nSummary\nSo, what have we learned?\nIt is probably OK to use MPAA ratings as a guide\nIf you’re optimizing for lack of violence, G and PG movies aren’t that much different, therefore don’t worry much.\nR rating doesn’t mean the movie is violent or has a lot of sexual content. But it definitely means there is some profanity in it!\nCaveats\nIt is important to remember that any rating will be arbitrary a priori. We aren’t working with exact count of swear words, time duration of violent scenes, or percentage of naked body revealed. And kids-in-mind.com rating isn’t perfect either. For example, the website rates Pulp Fiction at 10 on a “sex & nudity” scale, while there is hardly any sexual content in the movie.\nUpdate, Jan 10, 2018\nSo, a few days ago we were watching The Late Show with Stephen Colbert, and this bit with Matt Damon caught my instant attention:\n\nI remember when people at MIRAMAX came to us and said “Could you make it [Good Will Hunting] PG-13?” There’s no violence or sex to speak of, it’s just… And I said “What’s making it rated R?”, and they said “the language”, and I said “Okay well so we could loop a couple lines”, and they go “Yeah but you’re only allowed” … I think at the time you were allowed to say the F-word three times… and I said “Okay, well how many are we off by?” And they said “You go over by a hundred and forty-five”\n\n\nHa! So, my theory checks out! It’s profanity that makes a movie R rated! It can be puritan and pacifistic, but you drop a couple of F-bombs — and you’re out.\nIt is funny that I chose exactly Good Will Hunting as an example of how an otherwise modest movie can be sent straight to the R bench for what Matt claims is how they all talk in Boston.\nSeriously, you need a license to do braids and nails, yet raising a human being a future member of society is a no-brainer, right?↩︎\n",
    "preview": "posts/2017-09-30-mpaa/mpaa_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-01-09T21:05:43-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
